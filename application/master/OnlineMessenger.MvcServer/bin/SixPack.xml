<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SixPack</name>
    </assembly>
    <members>
        <member name="T:SixPack.Banking.CreditCard">
            <summary>
            Performs validation of credit card numbers
            </summary>
        </member>
        <member name="M:SixPack.Banking.CreditCard.GetType(System.String)">
            <summary>
            Gets the type of the credit card with the specified number.
            </summary>
            <param name="creditCardNumber">The credit card number.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Banking.CreditCard.IsValid(System.String,SixPack.Banking.CreditCardTypes,System.Boolean)">
            <summary>
            Determines whether the specified credit card number is valid.
            </summary>
            <param name="creditCardNumber">The credit card number.</param>
            <param name="validTypes">The valid types.</param>
            <param name="validateCheckDigit">if set to <c>true</c> validate the check digit.</param>
            <returns>
            	<c>true</c> if the specified credit card number is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SixPack.Banking.CreditCard.IsValid(System.String,SixPack.Banking.CreditCardTypes)">
            <summary>
            Determines whether the specified credit card number is valid. Does not validate the check digit.
            </summary>
            <param name="creditCardNumber">The credit card number.</param>
            <param name="validTypes">The valid types.</param>
            <returns>
            	<c>true</c> if the specified credit card number is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SixPack.Banking.CreditCard.IsCheckDigitValid(System.String)">
            <summary>
            Performs a validation using Luhn's Formula.
            </summary>
        </member>
        <member name="T:SixPack.Banking.CreditCardTypes">
            <summary>
            Types of Credit Cards
            </summary>
        </member>
        <member name="F:SixPack.Banking.CreditCardTypes.MasterCard">
            <summary>
            MasterCard
            </summary>
        </member>
        <member name="F:SixPack.Banking.CreditCardTypes.Visa">
            <summary>
            VISA
            </summary>
        </member>
        <member name="F:SixPack.Banking.CreditCardTypes.AmericanExpress">
            <summary>
            American Express
            </summary>
        </member>
        <member name="F:SixPack.Banking.CreditCardTypes.DinersClub">
            <summary>
            Diners Club
            </summary>
        </member>
        <member name="F:SixPack.Banking.CreditCardTypes.EnRoute">
            <summary>
            en Route
            </summary>
        </member>
        <member name="F:SixPack.Banking.CreditCardTypes.Discover">
            <summary>
            Discover
            </summary>
        </member>
        <member name="F:SixPack.Banking.CreditCardTypes.Jcb">
            <summary>
            JCB
            </summary>
        </member>
        <member name="F:SixPack.Banking.CreditCardTypes.Unknown">
            <summary>
            Unknown Credit Card
            </summary>
        </member>
        <member name="F:SixPack.Banking.CreditCardTypes.All">
            <summary>
            All Known Credit Card Types
            </summary>
        </member>
        <member name="F:SixPack.Banking.CreditCardTypes.Any">
            <summary>
            Any credit card type
            </summary>
        </member>
        <member name="T:SixPack.CodeGen.AbstractClass">
            <summary>
            A class that represents a class.
            </summary>
        </member>
        <member name="T:SixPack.CodeGen.IClassElement">
            <summary>
            Classes implementing this interface will accept a Class Visitor for rendering
            </summary>
        </member>
        <member name="M:SixPack.CodeGen.IClassElement.Accept(SixPack.CodeGen.IClassVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:SixPack.CodeGen.AbstractClass.Accept(SixPack.CodeGen.IClassVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="P:SixPack.CodeGen.AbstractClass.Fields">
            <summary>
            Gets the fields.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="P:SixPack.CodeGen.AbstractClass.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:SixPack.CodeGen.AbstractClass.Methods">
            <summary>
            Gets the methods.
            </summary>
            <value>The methods.</value>
        </member>
        <member name="P:SixPack.CodeGen.AbstractClass.Constructors">
            <summary>
            Gets the constructors.
            </summary>
            <value>The constructors.</value>
        </member>
        <member name="P:SixPack.CodeGen.AbstractClass.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SixPack.CodeGen.AbstractClass.Prefix">
            <summary>
            Gets or sets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="P:SixPack.CodeGen.AbstractClass.Postfix">
            <summary>
            Gets or sets the postfix.
            </summary>
            <value>The postfix.</value>
        </member>
        <member name="P:SixPack.CodeGen.AbstractClass.NamespaceDefinition">
            <summary>
            Gets or sets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:SixPack.CodeGen.AbstractClass.UsingClauses">
            <summary>
            Gets the using clauses.
            </summary>
            <value>The using clauses.</value>
        </member>
        <member name="T:SixPack.CodeGen.AbstractConstructor">
            <summary>
            An abstract class that represents a constructor
            </summary>
        </member>
        <member name="T:SixPack.CodeGen.AbstractMethod">
            <summary>
            An abstract class that represents a method
            </summary>
        </member>
        <member name="M:SixPack.CodeGen.AbstractMethod.Accept(SixPack.CodeGen.IClassVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="P:SixPack.CodeGen.AbstractMethod.Body">
            <summary>
            Gets the body.
            </summary>
            <value>The body.</value>
        </member>
        <member name="P:SixPack.CodeGen.AbstractMethod.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:SixPack.CodeGen.AbstractMethod.NameAndReturn">
            <summary>
            Gets the name and return.
            </summary>
            <value>The name and return.</value>
        </member>
        <member name="P:SixPack.CodeGen.AbstractMethod.Prefix">
            <summary>
            Gets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="M:SixPack.CodeGen.AbstractConstructor.Accept(SixPack.CodeGen.IClassVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="P:SixPack.CodeGen.AbstractConstructor.Postfix">
            <summary>
            Gets the postfix.
            </summary>
            <value>The postfix.</value>
        </member>
        <member name="T:SixPack.CodeGen.AbstractField">
            <summary>
            An abstract class that represents a field
            </summary>
        </member>
        <member name="T:SixPack.CodeGen.AbstractVariable">
            <summary>
            A class that represents a variable (field, property, parameter)
            </summary>
        </member>
        <member name="P:SixPack.CodeGen.AbstractVariable.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SixPack.CodeGen.AbstractVariable.VariableType">
            <summary>
            Gets the type of the variable.
            </summary>
            <value>The type of the variable.</value>
        </member>
        <member name="P:SixPack.CodeGen.AbstractVariable.Prefix">
            <summary>
            Gets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="M:SixPack.CodeGen.AbstractField.Accept(SixPack.CodeGen.IClassVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="T:SixPack.CodeGen.AbstractGetter">
            <summary>
            An abstract accessor class that represents a getter
            </summary>
        </member>
        <member name="T:SixPack.CodeGen.IAbstractAccessor">
            <summary>
            An interface that represents an accessor
            </summary>
        </member>
        <member name="P:SixPack.CodeGen.IAbstractAccessor.Body">
            <summary>
            Gets the body.
            </summary>
            <value>The body.</value>
        </member>
        <member name="P:SixPack.CodeGen.IAbstractAccessor.Prefix">
            <summary>
            Gets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="M:SixPack.CodeGen.AbstractGetter.Accept(SixPack.CodeGen.IClassVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="P:SixPack.CodeGen.AbstractGetter.Body">
            <summary>
            Gets the body.
            </summary>
            <value>The body.</value>
        </member>
        <member name="P:SixPack.CodeGen.AbstractGetter.Prefix">
            <summary>
            Gets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="T:SixPack.CodeGen.AbstractNamespace">
            <summary>
            An abstract class that represents a namespace.
            </summary>
        </member>
        <member name="M:SixPack.CodeGen.AbstractNamespace.Accept(SixPack.CodeGen.IClassVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="P:SixPack.CodeGen.AbstractNamespace.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:SixPack.CodeGen.AbstractParameter">
            <summary>
            Class that represents a parameter
            </summary>
        </member>
        <member name="M:SixPack.CodeGen.AbstractParameter.Accept(SixPack.CodeGen.IClassVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="T:SixPack.CodeGen.AbstractProperty">
            <summary>
            An abstract class that represents a property
            </summary>
        </member>
        <member name="M:SixPack.CodeGen.AbstractProperty.Accept(SixPack.CodeGen.IClassVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="P:SixPack.CodeGen.AbstractProperty.Getter">
            <summary>
            Gets the getter.
            </summary>
            <value>The getter.</value>
        </member>
        <member name="P:SixPack.CodeGen.AbstractProperty.Setter">
            <summary>
            Gets the setter.
            </summary>
            <value>The setter.</value>
        </member>
        <member name="T:SixPack.CodeGen.AbstractSetter">
            <summary>
            An abstract class that represents a setter
            </summary>
        </member>
        <member name="M:SixPack.CodeGen.AbstractSetter.Accept(SixPack.CodeGen.IClassVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="P:SixPack.CodeGen.AbstractSetter.Body">
            <summary>
            Gets the body.
            </summary>
            <value>The body.</value>
        </member>
        <member name="P:SixPack.CodeGen.AbstractSetter.Prefix">
            <summary>
            Gets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="T:SixPack.CodeGen.AbstractUsingClause">
            <summary>
            A class that represents a using clause
            </summary>
        </member>
        <member name="M:SixPack.CodeGen.AbstractUsingClause.Accept(SixPack.CodeGen.IClassVisitor)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="P:SixPack.CodeGen.AbstractUsingClause.NamespaceName">
            <summary>
            Gets the name of the name space.
            </summary>
            <value>The name of the name space.</value>
        </member>
        <member name="T:SixPack.CodeGen.CSharpClassVisitor">
            <summary>
            A class visitor that renders a C# source code representation to a TextWriter
            </summary>
        </member>
        <member name="T:SixPack.CodeGen.IClassVisitor">
            <summary>
            An interface that represents class visitors. 
            These classes can take an abstract class and 
            represent it in another form, like a source code file.
            </summary>
        </member>
        <member name="M:SixPack.CodeGen.IClassVisitor.Visit(SixPack.CodeGen.AbstractClass)">
            <summary>
            Visits the specified class.
            </summary>
            <param name="concreteClass">The class.</param>
        </member>
        <member name="M:SixPack.CodeGen.IClassVisitor.Visit(SixPack.CodeGen.AbstractConstructor)">
            <summary>
            Visits the specified constructor.
            </summary>
            <param name="constructor">The constructor.</param>
        </member>
        <member name="M:SixPack.CodeGen.IClassVisitor.Visit(SixPack.CodeGen.AbstractMethod)">
            <summary>
            Visits the specified method.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:SixPack.CodeGen.IClassVisitor.Visit(SixPack.CodeGen.AbstractField)">
            <summary>
            Visits the specified field.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:SixPack.CodeGen.IClassVisitor.Visit(SixPack.CodeGen.AbstractProperty)">
            <summary>
            Visits the specified property.
            </summary>
            <param name="concreteProperty">The property.</param>
        </member>
        <member name="M:SixPack.CodeGen.IClassVisitor.Visit(SixPack.CodeGen.AbstractParameter)">
            <summary>
            Visits the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:SixPack.CodeGen.IClassVisitor.Visit(SixPack.CodeGen.AbstractUsingClause)">
            <summary>
            Visits the specified clause.
            </summary>
            <param name="clause">The clause.</param>
        </member>
        <member name="M:SixPack.CodeGen.IClassVisitor.Visit(SixPack.CodeGen.AbstractNamespace)">
            <summary>
            Visits the specified name space.
            </summary>
            <param name="concreteNamespace">The name space.</param>
        </member>
        <member name="M:SixPack.CodeGen.IClassVisitor.Visit(SixPack.CodeGen.AbstractGetter)">
            <summary>
            Visits the specified getter.
            </summary>
            <param name="getter">The getter.</param>
        </member>
        <member name="M:SixPack.CodeGen.IClassVisitor.Visit(SixPack.CodeGen.AbstractSetter)">
            <summary>
            Visits the specified setter.
            </summary>
            <param name="setter">The setter.</param>
        </member>
        <member name="M:SixPack.CodeGen.CSharpClassVisitor.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.CodeGen.CSharpClassVisitor"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:SixPack.CodeGen.CSharpClassVisitor.Visit(SixPack.CodeGen.AbstractClass)">
            <summary>
            Visits the specified class.
            </summary>
            <param name="concreteClass">The class.</param>
        </member>
        <member name="M:SixPack.CodeGen.CSharpClassVisitor.Visit(SixPack.CodeGen.AbstractConstructor)">
            <summary>
            Visits the specified constructor.
            </summary>
            <param name="constructor">The constructor.</param>
        </member>
        <member name="M:SixPack.CodeGen.CSharpClassVisitor.Visit(SixPack.CodeGen.AbstractMethod)">
            <summary>
            Visits the specified method.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:SixPack.CodeGen.CSharpClassVisitor.Visit(SixPack.CodeGen.AbstractField)">
            <summary>
            Visits the specified field.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:SixPack.CodeGen.CSharpClassVisitor.Visit(SixPack.CodeGen.AbstractProperty)">
            <summary>
            Visits the specified property.
            </summary>
            <param name="concreteProperty">The property.</param>
        </member>
        <member name="M:SixPack.CodeGen.CSharpClassVisitor.Visit(SixPack.CodeGen.AbstractParameter)">
            <summary>
            Visits the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:SixPack.CodeGen.CSharpClassVisitor.Visit(SixPack.CodeGen.AbstractUsingClause)">
            <summary>
            Visits the specified clause.
            </summary>
            <param name="clause">The clause.</param>
        </member>
        <member name="M:SixPack.CodeGen.CSharpClassVisitor.Visit(SixPack.CodeGen.AbstractNamespace)">
            <summary>
            Visits the specified name space.
            </summary>
            <param name="concreteNamespace">The name space.</param>
        </member>
        <member name="M:SixPack.CodeGen.CSharpClassVisitor.Visit(SixPack.CodeGen.AbstractGetter)">
            <summary>
            Visits the specified getter.
            </summary>
            <param name="getter">The getter.</param>
        </member>
        <member name="M:SixPack.CodeGen.CSharpClassVisitor.Visit(SixPack.CodeGen.AbstractSetter)">
            <summary>
            Visits the specified setter.
            </summary>
            <param name="setter">The setter.</param>
        </member>
        <member name="T:SixPack.CodeGen.DataTableClass">
            <summary>
            A class that creates a data transfer object representation from a datatable.
            </summary>
        </member>
        <member name="T:SixPack.CodeGen.SimpleClass">
            <summary>
            A class that implements AbstractClass by simply storing data.
            </summary>
        </member>
        <member name="M:SixPack.CodeGen.SimpleClass.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.CodeGen.SimpleClass"/> class.
            </summary>
        </member>
        <member name="M:SixPack.CodeGen.SimpleClass.#ctor(System.String,SixPack.CodeGen.AbstractNamespace)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.CodeGen.SimpleClass"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="namespace">The name space.</param>
        </member>
        <member name="M:SixPack.CodeGen.SimpleClass.#ctor(System.String,SixPack.CodeGen.AbstractNamespace,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.CodeGen.SimpleClass"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="namespace">The name space.</param>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="M:SixPack.CodeGen.SimpleClass.#ctor(System.String,SixPack.CodeGen.AbstractNamespace,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.CodeGen.SimpleClass"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="namespace">The name space.</param>
            <param name="prefix">The prefix.</param>
            <param name="postfix">The postfix.</param>
        </member>
        <member name="P:SixPack.CodeGen.SimpleClass.Fields">
            <summary>
            Gets the fields.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleClass.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleClass.Methods">
            <summary>
            Gets the methods.
            </summary>
            <value>The methods.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleClass.Constructors">
            <summary>
            Gets the constructors.
            </summary>
            <value>The constructors.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleClass.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleClass.Prefix">
            <summary>
            Gets or sets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleClass.Postfix">
            <summary>
            Gets or sets the postfix.
            </summary>
            <value>The postfix.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleClass.NamespaceDefinition">
            <summary>
            Gets or sets the name space.
            </summary>
            <value>The name space.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleClass.UsingClauses">
            <summary>
            Gets the using clauses.
            </summary>
            <value>The using clauses.</value>
        </member>
        <member name="M:SixPack.CodeGen.DataTableClass.#ctor(System.Data.DataTable,SixPack.CodeGen.AbstractNamespace,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.CodeGen.DataTableClass"/> class.
            </summary>
            <param name="dataTable">The data table.</param>
            <param name="namespace">The @namespace.</param>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="T:SixPack.CodeGen.SimpleConstructor">
            <summary>
            Class that represents a constructor
            </summary>
        </member>
        <member name="M:SixPack.CodeGen.SimpleConstructor.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.CodeGen.SimpleConstructor"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="prefix">The prefix.</param>
            <param name="postfix">The postfix.</param>
        </member>
        <member name="P:SixPack.CodeGen.SimpleConstructor.Body">
            <summary>
            Gets the body.
            </summary>
            <value>The body.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleConstructor.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleConstructor.NameAndReturn">
            <summary>
            Gets the name and return.
            </summary>
            <value>The name and return.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleConstructor.Prefix">
            <summary>
            Gets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleConstructor.Postfix">
            <summary>
            Gets the postfix.
            </summary>
            <value>The postfix.</value>
        </member>
        <member name="T:SixPack.CodeGen.SimpleGetter">
            <summary>
            Class that represents a getter
            </summary>
        </member>
        <member name="M:SixPack.CodeGen.SimpleGetter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.CodeGen.SimpleGetter"/> class.
            </summary>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="M:SixPack.CodeGen.SimpleGetter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.CodeGen.SimpleGetter"/> class.
            </summary>
        </member>
        <member name="P:SixPack.CodeGen.SimpleGetter.Body">
            <summary>
            Gets the body.
            </summary>
            <value>The body.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleGetter.Prefix">
            <summary>
            Gets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="T:SixPack.CodeGen.SimpleMethod">
            <summary>
            Class that represents a Method
            </summary>
        </member>
        <member name="M:SixPack.CodeGen.SimpleMethod.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.CodeGen.SimpleMethod"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="prefix">The prefix.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:SixPack.CodeGen.SimpleMethod.Body">
            <summary>
            Gets the body.
            </summary>
            <value>The body.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleMethod.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleMethod.NameAndReturn">
            <summary>
            Gets the name and return.
            </summary>
            <value>The name and return.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleMethod.Prefix">
            <summary>
            Gets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="T:SixPack.CodeGen.SimpleNamespace">
            <summary>
            Class that represents a namespace
            </summary>
        </member>
        <member name="M:SixPack.CodeGen.SimpleNamespace.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.CodeGen.SimpleNamespace"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:SixPack.CodeGen.SimpleNamespace.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:SixPack.CodeGen.SimpleParameter">
            <summary>
            Class that represents a paramter
            </summary>
        </member>
        <member name="M:SixPack.CodeGen.SimpleParameter.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.CodeGen.SimpleParameter"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="P:SixPack.CodeGen.SimpleParameter.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleParameter.VariableType">
            <summary>
            Gets the type of the variable.
            </summary>
            <value>The type of the variable.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleParameter.Prefix">
            <summary>
            Gets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="T:SixPack.CodeGen.SimpleProperty">
            <summary>
            Class that represents a property
            </summary>
        </member>
        <member name="M:SixPack.CodeGen.SimpleProperty.#ctor(System.String,System.Type,System.String,SixPack.CodeGen.AbstractGetter,SixPack.CodeGen.AbstractSetter)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.CodeGen.SimpleProperty"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="prefix">The prefix.</param>
            <param name="getter">The getter.</param>
            <param name="setter">The setter.</param>
        </member>
        <member name="P:SixPack.CodeGen.SimpleProperty.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleProperty.VariableType">
            <summary>
            Gets the type of the variable.
            </summary>
            <value>The type of the variable.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleProperty.Prefix">
            <summary>
            Gets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleProperty.Getter">
            <summary>
            Gets the getter.
            </summary>
            <value>The getter.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleProperty.Setter">
            <summary>
            Gets the setter.
            </summary>
            <value>The setter.</value>
        </member>
        <member name="T:SixPack.CodeGen.SimpleSetter">
            <summary>
            Class that represents a setter
            </summary>
        </member>
        <member name="M:SixPack.CodeGen.SimpleSetter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.CodeGen.SimpleSetter"/> class.
            </summary>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="M:SixPack.CodeGen.SimpleSetter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.CodeGen.SimpleSetter"/> class.
            </summary>
        </member>
        <member name="P:SixPack.CodeGen.SimpleSetter.Body">
            <summary>
            Gets the body.
            </summary>
            <value>The body.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleSetter.Prefix">
            <summary>
            Gets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="T:SixPack.CodeGen.SimpleUsingClause">
            <summary>
            A class that represents a using clause
            </summary>
        </member>
        <member name="M:SixPack.CodeGen.SimpleUsingClause.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.CodeGen.SimpleUsingClause"/> class.
            </summary>
            <param name="namespaceName">Name of the namespace.</param>
        </member>
        <member name="P:SixPack.CodeGen.SimpleUsingClause.NamespaceName">
            <summary>
            Gets the name of the name space.
            </summary>
            <value>The name of the name space.</value>
        </member>
        <member name="T:SixPack.CodeGen.SimpleVariable">
            <summary>
            Class that represents a variable (parameter, property or field)
            </summary>
        </member>
        <member name="M:SixPack.CodeGen.SimpleVariable.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.CodeGen.SimpleVariable"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="P:SixPack.CodeGen.SimpleVariable.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleVariable.VariableType">
            <summary>
            Gets the type of the variable.
            </summary>
            <value>The type of the variable.</value>
        </member>
        <member name="P:SixPack.CodeGen.SimpleVariable.Prefix">
            <summary>
            Gets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="T:SixPack.Collections.Algorithms.BinarySearchExtensions">
            <summary>
            Extension methods that implement the binary search algorithm.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Algorithms.BinarySearchExtensions.BinarySearch``2(System.Collections.Generic.IList{``0},``1,System.Func{``1,``0,System.Int32})">
            <summary>
            Performs a binary search on the specified collection.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="TSearch">The type of the searched item.</typeparam>
            <param name="list">The list to be searched.</param>
            <param name="value">The value to search for.</param>
            <param name="comparer">The comparer that is used to compare the value with the list items.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Collections.Algorithms.BinarySearchExtensions.BinarySearch``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Performs a binary search on the specified collection.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="list">The list to be searched.</param>
            <param name="value">The value to search for.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Collections.Algorithms.BinarySearchExtensions.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Performs a binary search on the specified collection.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="list">The list to be searched.</param>
            <param name="value">The value to search for.</param>
            <param name="comparer">The comparer that is used to compare the value with the list items.</param>
            <returns></returns>
        </member>
        <member name="T:SixPack.Collections.Algorithms.MergeExtensions">
            <summary>
            Extension methods that allow to merge two sequences.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Algorithms.MergeExtensions.Merge``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Action{``0},System.Action{``1},System.Action{``0,``1},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Correlates the elements of two sequences based on matching keys simmilarly to a "full outer join" in SQL.
            For each results, executes an action
            </summary>
            <typeparam name="TOuter">The type of the outer sequence elements.</typeparam>
            <typeparam name="TInner">The type of the inner sequence elements.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="outer">The outer sequence.</param>
            <param name="inner">The inner sequence.</param>
            <param name="outerKeySelector">The outer key selector.</param>
            <param name="innerKeySelector">The inner key selector.</param>
            <param name="uniqueOuterProcessor">An action that is invoked for each element from <paramref name="outer"/> that is not present in <paramref name="inner"/>.</param>
            <param name="uniqueInnerProcessor">An action that is invoked for each element from <paramref name="inner"/> that is not present in <paramref name="outer"/>.</param>
            <param name="matchProcessor">An action that is invoked for each element from <paramref name="inner"/> that is also present in <paramref name="outer"/>.</param>
            <param name="comparer">The comparer used for key comparisons. Defaults to EqualityComparer&lt;TKey&gt;.Default.</param>
        </member>
        <member name="M:SixPack.Collections.Algorithms.MergeExtensions.Merge``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0},System.Action{``0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Correlates the elements of two sequences based on matching keys simmilarly to a "full outer join" in SQL.
            For each results, executes an action
            </summary>
            <typeparam name="T">The type of the sequence elements.</typeparam>
            <param name="outer">The outer sequence.</param>
            <param name="inner">The inner sequence.</param>
            <param name="uniqueOuterProcessor">An action that is invoked for each element from <paramref name="outer"/> that is not present in <paramref name="inner"/>.</param>
            <param name="uniqueInnerProcessor">An action that is invoked for each element from <paramref name="inner"/> that is not present in <paramref name="outer"/>.</param>
            <param name="matchProcessor">An action that is invoked for each element from <paramref name="inner"/> that is also present in <paramref name="outer"/>.</param>
            <param name="comparer">The comparer used for key comparisons. Defaults to EqualityComparer&lt;TKey&gt;.Default.</param>
        </member>
        <member name="M:SixPack.Collections.Algorithms.MergeExtensions.Merge``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{SixPack.Collections.Algorithms.MergeExtensions.IMergeSyntax{``0,``1},SixPack.Collections.Algorithms.MergeExtensions.IMergeSyntaxEnd})">
            <summary>
            Correlates the elements of two sequences based on matching keys simmilarly to a "full outer join" in SQL.
            For each results, executes an action
            </summary>
            <typeparam name="TOuter">The type of the outer sequence elements.</typeparam>
            <typeparam name="TInner">The type of the inner sequence elements.</typeparam>
            <param name="outer">The outer sequence.</param>
            <param name="inner">The inner sequence.</param>
            <param name="merge">The merge specification.</param>
        </member>
        <member name="T:SixPack.Collections.Algorithms.MergeExtensions.IMergeSyntax`2">
            <summary />
        </member>
        <member name="M:SixPack.Collections.Algorithms.MergeExtensions.IMergeSyntax`2.OuterKey``1(System.Func{`0,``0})">
            <summary>
            Specifies the outer key selector.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="T:SixPack.Collections.Algorithms.MergeExtensions.IMergeOuterSyntax`3">
            <summary />
        </member>
        <member name="M:SixPack.Collections.Algorithms.MergeExtensions.IMergeOuterSyntax`3.InnerKey(System.Func{`1,`2})">
            <summary>
            Specifies the inner key selector.
            </summary>
        </member>
        <member name="T:SixPack.Collections.Algorithms.MergeExtensions.IMergeOuterInnerSyntax`3">
            <summary />
        </member>
        <member name="T:SixPack.Collections.Algorithms.MergeExtensions.IMergeOuterInnerUsingComparerSyntax`3">
            <summary />
        </member>
        <member name="T:SixPack.Collections.Algorithms.MergeExtensions.IMergeWhenNotMatchedByInnerSyntax`3">
            <summary />
        </member>
        <member name="T:SixPack.Collections.Algorithms.MergeExtensions.IMergeWhenNotMatchedByOuterSyntax`3">
            <summary />
        </member>
        <member name="T:SixPack.Collections.Algorithms.MergeExtensions.IMergeSyntaxEnd">
            <summary />
        </member>
        <member name="M:SixPack.Collections.Algorithms.MergeExtensions.IMergeWhenNotMatchedByOuterSyntax`3.WhenMatched(System.Action{`0,`1})">
            <summary>
            Specifies an action that is invoked for each element from inner that is also present in outer.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Algorithms.MergeExtensions.IMergeWhenNotMatchedByInnerSyntax`3.WhenNotMatchedByOuter(System.Action{`1})">
            <summary>
            Specifies an action that is invoked for each element from inner that is not present in outer.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Algorithms.MergeExtensions.IMergeOuterInnerUsingComparerSyntax`3.WhenNotMatchedByInner(System.Action{`0})">
            <summary>
            Specifies an action that is invoked for each element from outer that is not present in inner.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Algorithms.MergeExtensions.IMergeOuterInnerSyntax`3.UsingComparer(System.Collections.Generic.IEqualityComparer{`2})">
            <summary>
            Specifies the comparer used for key comparisons. Defaults to EqualityComparer&lt;TKey&gt;.Default.
            </summary>
        </member>
        <member name="T:SixPack.Collections.Generic.CompositeKey`1">
            <summary>
            A class that can be used as a composite key for a dictionary or another simmilar data structure.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SixPack.Collections.Generic.CompositeKey`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Collections.Generic.CompositeKey`1"/> class.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.CompositeKey`1.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Collections.Generic.CompositeKey`1"/> class.
            </summary>
            <param name="descriptor">The descriptor.</param>
        </member>
        <member name="M:SixPack.Collections.Generic.CompositeKey`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Collections.Generic.CompositeKey`1"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:SixPack.Collections.Generic.CompositeKey`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Collections.Generic.CompositeKey`1"/> class.
            </summary>
            <param name="values">The values.</param>
            <param name="descriptor">The descriptor.</param>
        </member>
        <member name="M:SixPack.Collections.Generic.CompositeKey`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Collections.Generic.CompositeKey`1"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:SixPack.Collections.Generic.CompositeKey`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:SixPack.Collections.Generic.CompositeKey`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SixPack.Collections.Generic.CompositeKey`1.op_Equality(SixPack.Collections.Generic.CompositeKey{`0},SixPack.Collections.Generic.CompositeKey{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.CompositeKey`1.op_Inequality(SixPack.Collections.Generic.CompositeKey{`0},SixPack.Collections.Generic.CompositeKey{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.CompositeKey`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SixPack.Collections.Generic.CompositeKey`1.op_Implicit(`0[])~SixPack.Collections.Generic.CompositeKey{`0}">
            <summary>
            Performs an implicit conversion from T[] to <see cref="T:SixPack.Collections.Generic.CompositeKey`1"/>.
            </summary>
            <param name="values">The values.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.CompositeKey`1.IndexOfColumn(System.String)">
            <summary>
            Gets the index of the specified column.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="P:SixPack.Collections.Generic.CompositeKey`1.Item(System.String)">
            <summary>
            Gets the value the specified column.
            </summary>
            <value></value>
        </member>
        <member name="T:SixPack.Collections.Generic.Extensions.AggregateExtensions">
            <summary/>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Max(System.Collections.Generic.IEnumerable{System.Decimal},System.Decimal)">
            <summary>
            Returns the maximum value in a sequence of decimal values.
            </summary>
            <param name="source">A sequence of decimal values to determine the maximum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Min(System.Collections.Generic.IEnumerable{System.Decimal},System.Decimal)">
            <summary>
            Returns the minumim value in a sequence of decimal values.
            </summary>
            <param name="source">A sequence of decimal values to determine the minimum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},System.Decimal)">
            <summary>
            Invokes a transform function on each element of a sequence and returns the maximum decimal value.
            </summary>
            <param name="source">A sequence of decimal values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},System.Decimal)">
            <summary>
            Invokes a transform function on each element of a sequence and returns the minimum decimal value.
            </summary>
            <param name="source">A sequence of decimal values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},``0)">
            <summary>
            Returns the value in a sequence whose key is the greatest.
            </summary>
            <typeparam name="T">The type of the elements of the sequence.</typeparam>
            <param name="source">A sequence of decimal values to determine the maximum value of.</param>
            <param name="keyExtractor">A function that extracts the key of a value.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},``0)">
            <summary>
            Returns the value in a sequence whose key is the smallest.
            </summary>
            <typeparam name="T">The type of the elements of the sequence.</typeparam>
            <param name="source">A sequence of decimal values to determine the maximum value of.</param>
            <param name="keyExtractor">A function that extracts the key of a value.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Nullable{System.Decimal})">
            <summary>
            Returns the maximum value in a sequence of decimal? values.
            </summary>
            <param name="source">A sequence of decimal? values to determine the maximum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Nullable{System.Decimal})">
            <summary>
            Returns the minumim value in a sequence of decimal? values.
            </summary>
            <param name="source">A sequence of decimal? values to determine the minimum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},System.Nullable{System.Decimal})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the maximum decimal? value.
            </summary>
            <param name="source">A sequence of decimal? values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},System.Nullable{System.Decimal})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the minimum decimal? value.
            </summary>
            <param name="source">A sequence of decimal? values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},``0)">
            <summary>
            Returns the value in a sequence whose key is the greatest.
            </summary>
            <typeparam name="T">The type of the elements of the sequence.</typeparam>
            <param name="source">A sequence of decimal? values to determine the maximum value of.</param>
            <param name="keyExtractor">A function that extracts the key of a value.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},``0)">
            <summary>
            Returns the value in a sequence whose key is the smallest.
            </summary>
            <typeparam name="T">The type of the elements of the sequence.</typeparam>
            <param name="source">A sequence of decimal? values to determine the maximum value of.</param>
            <param name="keyExtractor">A function that extracts the key of a value.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Max(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Returns the maximum value in a sequence of double values.
            </summary>
            <param name="source">A sequence of double values to determine the maximum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Min(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Returns the minumim value in a sequence of double values.
            </summary>
            <param name="source">A sequence of double values to determine the minimum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Double)">
            <summary>
            Invokes a transform function on each element of a sequence and returns the maximum double value.
            </summary>
            <param name="source">A sequence of double values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Double)">
            <summary>
            Invokes a transform function on each element of a sequence and returns the minimum double value.
            </summary>
            <param name="source">A sequence of double values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},``0)">
            <summary>
            Returns the value in a sequence whose key is the greatest.
            </summary>
            <typeparam name="T">The type of the elements of the sequence.</typeparam>
            <param name="source">A sequence of double values to determine the maximum value of.</param>
            <param name="keyExtractor">A function that extracts the key of a value.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},``0)">
            <summary>
            Returns the value in a sequence whose key is the smallest.
            </summary>
            <typeparam name="T">The type of the elements of the sequence.</typeparam>
            <param name="source">A sequence of double values to determine the maximum value of.</param>
            <param name="keyExtractor">A function that extracts the key of a value.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Nullable{System.Double})">
            <summary>
            Returns the maximum value in a sequence of double? values.
            </summary>
            <param name="source">A sequence of double? values to determine the maximum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Nullable{System.Double})">
            <summary>
            Returns the minumim value in a sequence of double? values.
            </summary>
            <param name="source">A sequence of double? values to determine the minimum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},System.Nullable{System.Double})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the maximum double? value.
            </summary>
            <param name="source">A sequence of double? values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},System.Nullable{System.Double})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the minimum double? value.
            </summary>
            <param name="source">A sequence of double? values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},``0)">
            <summary>
            Returns the value in a sequence whose key is the greatest.
            </summary>
            <typeparam name="T">The type of the elements of the sequence.</typeparam>
            <param name="source">A sequence of double? values to determine the maximum value of.</param>
            <param name="keyExtractor">A function that extracts the key of a value.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},``0)">
            <summary>
            Returns the value in a sequence whose key is the smallest.
            </summary>
            <typeparam name="T">The type of the elements of the sequence.</typeparam>
            <param name="source">A sequence of double? values to determine the maximum value of.</param>
            <param name="keyExtractor">A function that extracts the key of a value.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Max(System.Collections.Generic.IEnumerable{System.Int64},System.Int64)">
            <summary>
            Returns the maximum value in a sequence of long values.
            </summary>
            <param name="source">A sequence of long values to determine the maximum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Min(System.Collections.Generic.IEnumerable{System.Int64},System.Int64)">
            <summary>
            Returns the minumim value in a sequence of long values.
            </summary>
            <param name="source">A sequence of long values to determine the minimum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},System.Int64)">
            <summary>
            Invokes a transform function on each element of a sequence and returns the maximum long value.
            </summary>
            <param name="source">A sequence of long values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},System.Int64)">
            <summary>
            Invokes a transform function on each element of a sequence and returns the minimum long value.
            </summary>
            <param name="source">A sequence of long values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},``0)">
            <summary>
            Returns the value in a sequence whose key is the greatest.
            </summary>
            <typeparam name="T">The type of the elements of the sequence.</typeparam>
            <param name="source">A sequence of long values to determine the maximum value of.</param>
            <param name="keyExtractor">A function that extracts the key of a value.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},``0)">
            <summary>
            Returns the value in a sequence whose key is the smallest.
            </summary>
            <typeparam name="T">The type of the elements of the sequence.</typeparam>
            <param name="source">A sequence of long values to determine the maximum value of.</param>
            <param name="keyExtractor">A function that extracts the key of a value.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Nullable{System.Int64})">
            <summary>
            Returns the maximum value in a sequence of long? values.
            </summary>
            <param name="source">A sequence of long? values to determine the maximum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Nullable{System.Int64})">
            <summary>
            Returns the minumim value in a sequence of long? values.
            </summary>
            <param name="source">A sequence of long? values to determine the minimum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},System.Nullable{System.Int64})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the maximum long? value.
            </summary>
            <param name="source">A sequence of long? values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},System.Nullable{System.Int64})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the minimum long? value.
            </summary>
            <param name="source">A sequence of long? values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},``0)">
            <summary>
            Returns the value in a sequence whose key is the greatest.
            </summary>
            <typeparam name="T">The type of the elements of the sequence.</typeparam>
            <param name="source">A sequence of long? values to determine the maximum value of.</param>
            <param name="keyExtractor">A function that extracts the key of a value.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},``0)">
            <summary>
            Returns the value in a sequence whose key is the smallest.
            </summary>
            <typeparam name="T">The type of the elements of the sequence.</typeparam>
            <param name="source">A sequence of long? values to determine the maximum value of.</param>
            <param name="keyExtractor">A function that extracts the key of a value.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Max(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Returns the maximum value in a sequence of int values.
            </summary>
            <param name="source">A sequence of int values to determine the maximum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Min(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Returns the minumim value in a sequence of int values.
            </summary>
            <param name="source">A sequence of int values to determine the minimum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},System.Int32)">
            <summary>
            Invokes a transform function on each element of a sequence and returns the maximum int value.
            </summary>
            <param name="source">A sequence of int values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},System.Int32)">
            <summary>
            Invokes a transform function on each element of a sequence and returns the minimum int value.
            </summary>
            <param name="source">A sequence of int values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},``0)">
            <summary>
            Returns the value in a sequence whose key is the greatest.
            </summary>
            <typeparam name="T">The type of the elements of the sequence.</typeparam>
            <param name="source">A sequence of int values to determine the maximum value of.</param>
            <param name="keyExtractor">A function that extracts the key of a value.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},``0)">
            <summary>
            Returns the value in a sequence whose key is the smallest.
            </summary>
            <typeparam name="T">The type of the elements of the sequence.</typeparam>
            <param name="source">A sequence of int values to determine the maximum value of.</param>
            <param name="keyExtractor">A function that extracts the key of a value.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Nullable{System.Int32})">
            <summary>
            Returns the maximum value in a sequence of int? values.
            </summary>
            <param name="source">A sequence of int? values to determine the maximum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Nullable{System.Int32})">
            <summary>
            Returns the minumim value in a sequence of int? values.
            </summary>
            <param name="source">A sequence of int? values to determine the minimum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},System.Nullable{System.Int32})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the maximum int? value.
            </summary>
            <param name="source">A sequence of int? values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},System.Nullable{System.Int32})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the minimum int? value.
            </summary>
            <param name="source">A sequence of int? values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},``0)">
            <summary>
            Returns the value in a sequence whose key is the greatest.
            </summary>
            <typeparam name="T">The type of the elements of the sequence.</typeparam>
            <param name="source">A sequence of int? values to determine the maximum value of.</param>
            <param name="keyExtractor">A function that extracts the key of a value.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},``0)">
            <summary>
            Returns the value in a sequence whose key is the smallest.
            </summary>
            <typeparam name="T">The type of the elements of the sequence.</typeparam>
            <param name="source">A sequence of int? values to determine the maximum value of.</param>
            <param name="keyExtractor">A function that extracts the key of a value.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Max(System.Collections.Generic.IEnumerable{System.Single},System.Single)">
            <summary>
            Returns the maximum value in a sequence of float values.
            </summary>
            <param name="source">A sequence of float values to determine the maximum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Min(System.Collections.Generic.IEnumerable{System.Single},System.Single)">
            <summary>
            Returns the minumim value in a sequence of float values.
            </summary>
            <param name="source">A sequence of float values to determine the minimum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},System.Single)">
            <summary>
            Invokes a transform function on each element of a sequence and returns the maximum float value.
            </summary>
            <param name="source">A sequence of float values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},System.Single)">
            <summary>
            Invokes a transform function on each element of a sequence and returns the minimum float value.
            </summary>
            <param name="source">A sequence of float values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},``0)">
            <summary>
            Returns the value in a sequence whose key is the greatest.
            </summary>
            <typeparam name="T">The type of the elements of the sequence.</typeparam>
            <param name="source">A sequence of float values to determine the maximum value of.</param>
            <param name="keyExtractor">A function that extracts the key of a value.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},``0)">
            <summary>
            Returns the value in a sequence whose key is the smallest.
            </summary>
            <typeparam name="T">The type of the elements of the sequence.</typeparam>
            <param name="source">A sequence of float values to determine the maximum value of.</param>
            <param name="keyExtractor">A function that extracts the key of a value.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Nullable{System.Single})">
            <summary>
            Returns the maximum value in a sequence of float? values.
            </summary>
            <param name="source">A sequence of float? values to determine the maximum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Nullable{System.Single})">
            <summary>
            Returns the minumim value in a sequence of float? values.
            </summary>
            <param name="source">A sequence of float? values to determine the minimum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},System.Nullable{System.Single})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the maximum float? value.
            </summary>
            <param name="source">A sequence of float? values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},System.Nullable{System.Single})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the minimum float? value.
            </summary>
            <param name="source">A sequence of float? values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},``0)">
            <summary>
            Returns the value in a sequence whose key is the greatest.
            </summary>
            <typeparam name="T">The type of the elements of the sequence.</typeparam>
            <param name="source">A sequence of float? values to determine the maximum value of.</param>
            <param name="keyExtractor">A function that extracts the key of a value.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},``0)">
            <summary>
            Returns the value in a sequence whose key is the smallest.
            </summary>
            <typeparam name="T">The type of the elements of the sequence.</typeparam>
            <param name="source">A sequence of float? values to determine the maximum value of.</param>
            <param name="keyExtractor">A function that extracts the key of a value.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the maximum value in a generic sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.AggregateExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the minimum value in a generic sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="defaultValue">The default value that is returned if the sequence is empty.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="T:SixPack.Collections.Generic.Extensions.DictionaryExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Collections.Generic.IDictionary`2"/> type.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.DictionaryExtensions.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <remarks>
            This method is simmilar to IDictionary.TryGetValue(key, out value), except that
            it does not use an output parameter. This is useful when one needs to use type
            inference.
            </remarks>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.DictionaryExtensions.ValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            If the dictionary contains the specified key, returns the value associated to that key; otherwise returns default(TValue).
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.DictionaryExtensions.ValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            If the dictionary contains the specified key, returns the value associated to that key; otherwise returns default(TValue).
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.DictionaryExtensions.Add``3(System.Collections.Generic.IDictionary{``0,``2},``0,``1)">
            <summary>
            Adds a value to a dictionary of collections by adding the value to the collection that is associated to the
            specified key. If no collection is associated to the key, a new collection is added and associated.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.DictionaryExtensions.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns a read-only wrapper of the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.DictionaryExtensions.AsReadOnly``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns a read-only wrapper of the specified list.
            </summary>
            <typeparam name="T">The type of the elements of the list.</typeparam>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="T:SixPack.Collections.Generic.Extensions.DictionaryLookupResult`1">
            <summary>
            Contains the result of a dictionary lookup.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.DictionaryLookupResult`1.#ctor(System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Collections.Generic.Extensions.DictionaryLookupResult`1"/> struct.
            </summary>
            <param name="found">if set to <c>true</c> [found].</param>
            <param name="result">The result.</param>
        </member>
        <member name="P:SixPack.Collections.Generic.Extensions.DictionaryLookupResult`1.Found">
            <summary>
            Gets a value indicating whether the key was found.
            </summary>
            <value><c>true</c> if found; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SixPack.Collections.Generic.Extensions.DictionaryLookupResult`1.Result">
            <summary>
            Gets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:SixPack.Collections.Generic.Extensions.EnumerableExtensions">
            <summary>
            Extension methods for sequences.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableExtensions.ToTree``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1})">
            <summary>
            Builds a tree from a sequence. The order of the items is preserved within each tree level.
            </summary>
            <typeparam name="TItem">The type of the sequence items.</typeparam>
            <typeparam name="TKey">The type of the item key.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="getKey">A function that returns the key of the item.</param>
            <param name="getParentKey">A function that returns the key of the parent of the item.</param>
            <returns>Returns the list of all nodes that do not have a parent. An item does not have a parent when its key is null.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableExtensions.ToTree``3(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``2},System.Func{``1,``2},System.Func{``1,``0},System.Action{``0,``0})">
            <summary>
            Builds a tree from a sequence. The order of the items is preserved within each tree level.
            </summary>
            <typeparam name="TNode">The type of the tree nodes.</typeparam>
            <typeparam name="TItem">The type of the sequence items.</typeparam>
            <typeparam name="TKey">The type of the item key.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="getKey">A function that returns the key of the item.</param>
            <param name="getParentKey">A function that returns the key of the parent of the item.</param>
            <param name="createNode">A function that transforms an item into a tree node.</param>
            <param name="addChildNode">An action that adds a child node to a parent node. The first argument is the parent node, and the second is the child node to be added.</param>
            <returns>Returns the list of all nodes that do not have a parent. An item does not have a parent when its key is null.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableExtensions.TreeWalk``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Enumerates every node of a tree structure using pre-order walk traversing method.
            </summary>
            <typeparam name="T">The type of the nodes.</typeparam>
            <param name="root">A sequence containing the root nodes.</param>
            <param name="getChildren">A function that returns the children of a node.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableExtensions.TreeWalk``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},SixPack.Collections.Generic.Extensions.EnumerableExtensions.CreateNodeDelegate{``0,``1})">
            <summary>
            Enumerates every node of a tree structure using pre-order walk traversing method.
            </summary>
            <typeparam name="T">The type of the nodes.</typeparam>
            <typeparam name="TNode">The type of the resulting nodes.</typeparam>
            <param name="root">A sequence containing the root nodes.</param>
            <param name="getChildren">A function that returns the children of a node.</param>
            <param name="createNode">A function that takes the .</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableExtensions.Index``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Indexes the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableExtensions.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},``0)">
            <summary>
            Applies an accumulator function over a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to aggregate over.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <param name="valueIfEmpty">The value to return if source is empty.</param>
            <returns>The final accumulator value.</returns>
            <exception cref="T:System.ArgumentNullException">source or func is null.</exception>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableExtensions.Combinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Generates all the combinations of <paramref name="n"/> elements of the specified sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sequence">The sequence.</param>
            <param name="n">The number of items to be picked on each combination.</param>
            <returns>
            Returns a sequence of sequences of <paramref name="n"/> elements picked from <paramref name="sequence"/>, without repetitions.
            </returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Appends elements to a sequence.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="source">The sequence to which the items are to be appended.</param>
            <param name="itemsToAppend">The items to append.</param>
            <returns>
            Returns a new sequence that will yield the elements in <paramref name="source"/>
            followed by the elements in <paramref name="itemsToAppend"/>.
            </returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Prepends elements to a sequence.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="source">The sequence to which the items are to be prepended.</param>
            <param name="itemsToPrepend">The items to prepend.</param>
            <returns>
            Returns a new sequence that will yield the elements in <paramref name="itemsToPrepend"/>
            followed by the elements in <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableExtensions.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns distinct elements from a sequence by extracting a key from each element and using the default equality comparer to compare values.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the keys of the elements of source.</typeparam>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <param name="keyExtractor">A function that returns the key of a given item.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableExtensions.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Returns distinct elements from a sequence by extracting a key from each element and using the specified equality comparer to compare values.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the keys of the elements of source.</typeparam>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <param name="keyExtractor">A function that returns the key of a given item.</param>
            <param name="comparer">An System.Collections.Generic.IEqualityComparer{TKey} to compare keys.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableExtensions.AddRange``2(``0,System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Adds all the elements from <paramref name="range"/> to <paramref name="collection"/>.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="collection">The collection where the elements are to be added.</param>
            <param name="range">The elements to be added to the collection.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableExtensions.OuterJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``3},System.Func{``1,``3},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Correlates the elements of two sequences based on matching keys simmilarly to a "full outer join" in SQL.
            </summary>
            <typeparam name="TOuter">The type of the outer sequence elements.</typeparam>
            <typeparam name="TInner">The type of the inner sequence elements.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TResult">The type of the resulting sequence elements.</typeparam>
            <param name="outer">The outer sequence.</param>
            <param name="inner">The inner sequence.</param>
            <param name="outerKeySelector">The outer key selector.</param>
            <param name="innerKeySelector">The inner key selector.</param>
            <param name="uniqueOuterSelector">A selector that is invoked for each element from <paramref name="outer"/> that is not present in <paramref name="inner"/>.</param>
            <param name="uniqueInnerSelector">A selector that is invoked for each element from <paramref name="inner"/> that is not present in <paramref name="outer"/>.</param>
            <param name="matchSelector">A selector that is invoked for each element from <paramref name="inner"/> that is also present in <paramref name="outer"/>.</param>
            <param name="comparer">The comparer used for key comparisons. Defaults to EqualityComparer&lt;TKey&gt;.Default.</param>
            <returns>Returns a sequence of the results of <paramref name="uniqueOuterSelector"/>, <paramref name="uniqueInnerSelector"/> and <paramref name="matchSelector"/>.</returns>
        </member>
        <member name="T:SixPack.Collections.Generic.Extensions.EnumerableExtensions.AddChildNodeDelegate`1">
            <summary />
        </member>
        <member name="T:SixPack.Collections.Generic.Extensions.EnumerableExtensions.CreateNodeDelegate`2">
            <summary />
        </member>
        <member name="T:SixPack.Collections.Generic.Extensions.EnumerableTupleExtensions">
            <summary>
            Extension methods for sequences.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableTupleExtensions.ForAll``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Action{``0,``1})">
            <summary>
            Executes the specified action for each element.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableTupleExtensions.Select``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Func{``0,``1,``2})">
            <summary>
            performs a projection on a sequence.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableTupleExtensions.ForAll``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Action{``0,``1,``2})">
            <summary>
            Executes the specified action for each element.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableTupleExtensions.Select``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``3})">
            <summary>
            performs a projection on a sequence.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableTupleExtensions.Zip``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Creates a new sequence of tuples containing the corresponding elements of two sequences.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableTupleExtensions.ForAll``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}},System.Action{``0,``1,``2,``3})">
            <summary>
            Executes the specified action for each element.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableTupleExtensions.Select``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            performs a projection on a sequence.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableTupleExtensions.Zip``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Collections.Generic.IEnumerable{``3})">
            <summary>
            Creates a new sequence of tuples containing the corresponding elements of two sequences.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableTupleExtensions.ForAll``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}},System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Executes the specified action for each element.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableTupleExtensions.Select``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            performs a projection on a sequence.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableTupleExtensions.Zip``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}},System.Collections.Generic.IEnumerable{``4})">
            <summary>
            Creates a new sequence of tuples containing the corresponding elements of two sequences.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableTupleExtensions.ForAll``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Executes the specified action for each element.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableTupleExtensions.Select``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            performs a projection on a sequence.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableTupleExtensions.Zip``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}},System.Collections.Generic.IEnumerable{``5})">
            <summary>
            Creates a new sequence of tuples containing the corresponding elements of two sequences.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableTupleExtensions.ForAll``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Executes the specified action for each element.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableTupleExtensions.Select``8(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            performs a projection on a sequence.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableTupleExtensions.Zip``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Collections.Generic.IEnumerable{``6})">
            <summary>
            Creates a new sequence of tuples containing the corresponding elements of two sequences.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableTupleExtensions.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Creates a new sequence of tuples containing the corresponding elements of two sequences.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.EnumerableTupleExtensions.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes the specified action for each element.
            </summary>
        </member>
        <member name="T:SixPack.Collections.Generic.Extensions.IndexedItem`1">
            <summary>
            Contains additional information about an item from a sequence-
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.IndexedItem`1.#ctor(`0,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Collections.Generic.Extensions.IndexedItem`1"/> struct.
            </summary>
        </member>
        <member name="P:SixPack.Collections.Generic.Extensions.IndexedItem`1.Item">
            <summary>
            Gets or sets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="P:SixPack.Collections.Generic.Extensions.IndexedItem`1.Index">
            <summary>
            Gets or sets the index of the item in the sequence.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:SixPack.Collections.Generic.Extensions.IndexedItem`1.IsFirst">
            <summary>
            Gets or sets a value indicating whether this instance is the first one in the sequence.
            </summary>
            <value><c>true</c> if this instance is first; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SixPack.Collections.Generic.Extensions.IndexedItem`1.IsLast">
            <summary>
            Gets or sets a value indicating whether this instance is the last one in the sequence.
            </summary>
            <value><c>true</c> if this instance is last; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SixPack.Collections.Generic.Extensions.TreeNode`1">
            <summary>
            Default type used to build hierarchical trees.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.TreeNode`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Collections.Generic.Extensions.TreeNode`1"/> class.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.TreeNode`1.AllNodes">
            <summary>
            Gets an enumerator that returns all the nodes of the tree starting at this node.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SixPack.Collections.Generic.Extensions.TreeNode`1.Parent">
            <summary>
            Gets or sets the parent of the current node.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:SixPack.Collections.Generic.Extensions.TreeNode`1.Children">
            <summary>
            Gets or sets the children of the current node.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:SixPack.Collections.Generic.Extensions.TreeNode`1.Value">
            <summary>
            Gets or sets the value of the node.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:SixPack.Collections.Generic.Extensions.TreeNode`1.Level">
            <summary>
            Gets the level of depth of this node.
            </summary>
            <value>The level.</value>
        </member>
        <member name="P:SixPack.Collections.Generic.Extensions.TreeNode`1.PreviousSibling">
            <summary>
            Gets the previous sibling.
            </summary>
            <value>The previous sibling.</value>
        </member>
        <member name="P:SixPack.Collections.Generic.Extensions.TreeNode`1.NextSibling">
            <summary>
            Gets the next sibling.
            </summary>
            <value>The next sibling.</value>
        </member>
        <member name="T:SixPack.Collections.Generic.Extensions.TreeNodeExtensions">
            <summary>
            Extension methods that simplyfy working with tree nodes.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Extensions.TreeNodeExtensions.AllNodes``1(System.Collections.Generic.IEnumerable{SixPack.Collections.Generic.Extensions.TreeNode{``0}})">
            <summary>
            Gets an enumerator that returns all the nodes of the tree starting at the specified nodes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nodes">The nodes.</param>
            <returns></returns>
        </member>
        <member name="T:SixPack.Collections.Generic.FullList`1">
            <summary>
            Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists. Implements <see cref="T:SixPack.Collections.Generic.IFullList`1"/>
            </summary>
        </member>
        <member name="T:SixPack.Collections.Generic.IFullList`1">
            <summary>
            Represents a collection of objects that can be individually accessed by index or by query.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="M:SixPack.Collections.Generic.IFullList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:SixPack.Collections.Generic.IFullList`1"/>.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:SixPack.Collections.Generic.IFullList`1"/>. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
        </member>
        <member name="M:SixPack.Collections.Generic.IFullList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:SixPack.Collections.Generic.IFullList`1"/> using the specified <see cref="T:System.Comparison`1"/>.
            </summary>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> to use when comparing elements.</param>
        </member>
        <member name="M:SixPack.Collections.Generic.IFullList`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified <see cref="T:System.Predicate`1"/>, and returns the first occurrence within the entire <see cref="T:SixPack.Collections.Generic.IFullList`1"/>.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified <see cref="T:System.Predicate`1"/>, if found; otherwise, the default value for type T.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.IFullList`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified <see cref="T:System.Predicate`1"/>.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to search for.</param>
            <returns>A <see cref="T:SixPack.Collections.Generic.IFullList`1"/> containing all the elements that match the conditions defined by the specified <see cref="T:System.Predicate`1"/>, if found; otherwise, an empty <see cref="T:SixPack.Collections.Generic.IFullList`1"/>.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.IFullList`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines whether every element in the <see cref="T:SixPack.Collections.Generic.IFullList`1"/> matches the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions to check against the elements.</param>
            <returns>true if every element in the <see cref="T:SixPack.Collections.Generic.IFullList`1"/> matches the conditions defined by the specified predicate; otherwise, false. If the list has no elements, the return value is true.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.IFullList`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the <see cref="T:SixPack.Collections.Generic.IFullList`1"/>.
            </summary>
            <param name="action">The <see cref="T:System.Action`1"/> delegate to perform on each element of the <see cref="T:SixPack.Collections.Generic.IFullList`1"/>.</param>
        </member>
        <member name="M:SixPack.Collections.Generic.IFullList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source <see cref="T:SixPack.Collections.Generic.IFullList`1"/>.
            </summary>
            <param name="index">The zero-based <see cref="T:SixPack.Collections.Generic.IFullList`1"/> index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the source <see cref="T:SixPack.Collections.Generic.IFullList`1"/>.</returns>
        </member>
        <member name="M:SixPack.Collections.Generic.FullList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Collections.Generic.FullList`1"/> class.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.FullList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Collections.Generic.FullList`1"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:SixPack.Collections.Generic.FullList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Collections.Generic.FullList`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:SixPack.Collections.Generic.FullList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source <see cref="T:SixPack.Collections.Generic.IFullList`1"/>.
            </summary>
            <param name="index">The zero-based <see cref="T:SixPack.Collections.Generic.IFullList`1"/> index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>
            A shallow copy of a range of elements in the source <see cref="T:SixPack.Collections.Generic.IFullList`1"/>.
            </returns>
        </member>
        <member name="M:SixPack.Collections.Generic.FullList`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified <see cref="T:System.Predicate`1"/>.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to search for.</param>
            <returns>
            A <see cref="T:SixPack.Collections.Generic.IFullList`1"/> containing all the elements that match the conditions defined by the specified <see cref="T:System.Predicate`1"/>, if found; otherwise, an empty <see cref="T:SixPack.Collections.Generic.IFullList`1"/>.
            </returns>
        </member>
        <member name="T:SixPack.Collections.Generic.GenericComparer`1">
            <summary>
            Generic implementation of <see cref="T:System.Collections.Generic.IComparer`1"/> based on the <see cref="T:System.IComparable`1"/> interface.
            </summary>
            <typeparam name="TCompared">The type of the compared objects.</typeparam>
        </member>
        <member name="M:SixPack.Collections.Generic.GenericComparer`1.#ctor(SixPack.Collections.Generic.ComparisonOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Collections.Generic.GenericComparer`1"/> class.
            </summary>
            <param name="order">The order of the comparison.</param>
        </member>
        <member name="M:SixPack.Collections.Generic.GenericComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero<paramref name="x"/> is less than <paramref name="y"/>.Zero<paramref name="x"/> equals <paramref name="y"/>.Greater than zero<paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="P:SixPack.Collections.Generic.GenericComparer`1.Natural">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IComparer`1"/> that order elements in natural order.
            </summary>
        </member>
        <member name="P:SixPack.Collections.Generic.GenericComparer`1.Reverse">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IComparer`1"/> that order elements in inverse order.
            </summary>
        </member>
        <member name="T:SixPack.Collections.Generic.GenericComparer">
            <summary>
            Generic methods for comparing two objects that implement the <see cref="T:System.IComparable`1"/> interface.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.GenericComparer.Compare``1(``0,``0,SixPack.Collections.Generic.ComparisonOrder)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="order">The order of the comparison.</param>
            <returns>
            Value Condition Less than zero<paramref name="x"/> is less than <paramref name="y"/>.Zero<paramref name="x"/> equals <paramref name="y"/>.Greater than zero<paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="T:SixPack.Collections.Generic.ComparisonOrder">
            <summary>
            Specifies the order of a comparison.
            </summary>
        </member>
        <member name="F:SixPack.Collections.Generic.ComparisonOrder.Natural">
            <summary>
            Uses the natural ordering of the items.
            </summary>
        </member>
        <member name="F:SixPack.Collections.Generic.ComparisonOrder.Reverse">
            <summary>
            Uses the reverse ordering of the items.
            </summary>
        </member>
        <member name="T:SixPack.Collections.Generic.ITrieDomain`1">
            <summary>
            Represents the domain of possible atoms to be used in a <see cref="T:SixPack.Collections.Generic.Trie`2"/>.
            A domain is a mapping from atoms to zero-based integers.
            </summary>
            <typeparam name="TAtom">The type of the atom.</typeparam>
        </member>
        <member name="M:SixPack.Collections.Generic.ITrieDomain`1.MapFromDomain(`0)">
            <summary>
            Gets the index of the specified atom in the domanin.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.ITrieDomain`1.MapToDomain(System.Int32)">
            <summary>
            Gets the atome corresponding to the specified index.
            </summary>
        </member>
        <member name="P:SixPack.Collections.Generic.ITrieDomain`1.Size">
            <summary>
            Gets the size of the domain (the number of elements of the domain).
            </summary>
        </member>
        <member name="T:SixPack.Collections.Generic.ITrieEnumerator`2">
            <summary>
            Allows to iterate results from a <see cref="T:SixPack.Collections.Generic.Trie`2"/>.
            </summary>
            <typeparam name="TAtom">The type of the atom.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:SixPack.Collections.Generic.ITrieEnumerator`2.MovePrevious">
            <summary>
            Moves to the previous result.
            </summary>
        </member>
        <member name="T:SixPack.Collections.Generic.LambdaEqualityComparer`1">
            <summary>
            Implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> based on lambda expressions.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SixPack.Collections.Generic.LambdaEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Collections.Generic.LambdaEqualityComparer`1"/> class.
            </summary>
            <param name="equals">The Equals() implementation.</param>
            <param name="getHashCode">The GetHashCode() implementation.</param>
        </member>
        <member name="M:SixPack.Collections.Generic.LambdaEqualityComparer`1.Equals(`0,`0)">
            <summary/>
        </member>
        <member name="M:SixPack.Collections.Generic.LambdaEqualityComparer`1.GetHashCode(`0)">
            <summary/>
        </member>
        <member name="T:SixPack.Collections.Generic.LambdaEqualityComparer">
            <summary>
            Factory to create instances of <see cref="T:SixPack.Collections.Generic.LambdaEqualityComparer`1"/>
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.LambdaEqualityComparer.Create``1(System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>
            Creates a new instance of the <see cref="T:SixPack.Collections.Generic.LambdaEqualityComparer`1"/> class.
            </summary>
            <param name="equals">The Equals() implementation.</param>
            <param name="getHashCode">The GetHashCode() implementation.</param>
        </member>
        <member name="M:SixPack.Collections.Generic.LambdaEqualityComparer.Create``2(System.Func{``0,``1})">
            <summary>
            Creates a new instance of the <see cref="T:SixPack.Collections.Generic.LambdaEqualityComparer`1"/> class.
            </summary>
            <param name="getKey">A function that extracts the key of an object.</param>
            <returns></returns>
        </member>
        <member name="T:SixPack.Collections.Generic.LettersDomain">
            <summary>
            Represents the domain of lower case letters from the latin alphabet.
            </summary>
        </member>
        <member name="T:SixPack.Collections.Generic.Pair`2">
            <summary>
            A class that holds a pair of objects.
            </summary>
            <remarks>
            This class implements <see cref="M:SixPack.Collections.Generic.Pair`2.Equals(System.Object)"/> and <see cref="M:SixPack.Collections.Generic.Pair`2.GetHashCode"/> in a
            way that makes it suitable for usage as a key in an <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </remarks>
            <typeparam name="TFirst">The type of the first object.</typeparam>
            <typeparam name="TSecond">The type of the second object.</typeparam>
        </member>
        <member name="M:SixPack.Collections.Generic.Pair`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Collections.Generic.Pair`2"/> class.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Pair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Collections.Generic.Pair`2"/> class.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
        </member>
        <member name="M:SixPack.Collections.Generic.Pair`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:SixPack.Collections.Generic.Pair`2.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:SixPack.Collections.Generic.Pair`2.First">
            <summary>
            Gets or sets the first object.
            </summary>
            <value>The first object.</value>
        </member>
        <member name="P:SixPack.Collections.Generic.Pair`2.Second">
            <summary>
            Gets or sets the second object.
            </summary>
            <value>The second object.</value>
        </member>
        <member name="T:SixPack.Collections.Generic.Pair">
            <summary>
            Helper class that creates instances of pairs.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Pair.New``2(``0,``1)">
            <summary>
            Creates a new <see cref="T:SixPack.Collections.Generic.Pair`2"/>.
            </summary>
            <typeparam name="TFirst">The type of the first object.</typeparam>
            <typeparam name="TSecond">The type of the second object.</typeparam>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>Returns the <see cref="T:SixPack.Collections.Generic.Pair`2"/> that was created.</returns>
        </member>
        <member name="T:SixPack.Collections.Generic.ReadOnlyDictionary`2">
            <summary>
            Wraps an <see cref="T:System.Collections.Generic.IDictionary`2"/> to allow read-only access.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:SixPack.Collections.Generic.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Collections.Generic.ReadOnlyDictionary`2"/> class.
            </summary>
            <param name="wrapped">The wrapped dictionary.</param>
        </member>
        <member name="M:SixPack.Collections.Generic.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
            <summary />
        </member>
        <member name="M:SixPack.Collections.Generic.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary />
        </member>
        <member name="M:SixPack.Collections.Generic.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
            <summary />
        </member>
        <member name="M:SixPack.Collections.Generic.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary />
        </member>
        <member name="M:SixPack.Collections.Generic.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary />
        </member>
        <member name="M:SixPack.Collections.Generic.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
            <summary />
        </member>
        <member name="M:SixPack.Collections.Generic.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary />
        </member>
        <member name="M:SixPack.Collections.Generic.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary />
        </member>
        <member name="M:SixPack.Collections.Generic.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary />
        </member>
        <member name="M:SixPack.Collections.Generic.ReadOnlyDictionary`2.GetEnumerator">
            <summary />
        </member>
        <member name="M:SixPack.Collections.Generic.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary />
        </member>
        <member name="P:SixPack.Collections.Generic.ReadOnlyDictionary`2.Keys">
            <summary />
        </member>
        <member name="P:SixPack.Collections.Generic.ReadOnlyDictionary`2.Values">
            <summary />
        </member>
        <member name="P:SixPack.Collections.Generic.ReadOnlyDictionary`2.Item(`0)">
            <summary />
        </member>
        <member name="P:SixPack.Collections.Generic.ReadOnlyDictionary`2.Count">
            <summary />
        </member>
        <member name="P:SixPack.Collections.Generic.ReadOnlyDictionary`2.IsReadOnly">
            <summary />
        </member>
        <member name="T:SixPack.Collections.Generic.SingletonFactory`2">
            <summary>
            A factory that ensures that each object is created only once.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TSingleton">The type of the singleton.</typeparam>
        </member>
        <member name="M:SixPack.Collections.Generic.SingletonFactory`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Collections.Generic.SingletonFactory`2"/> class.
            </summary>
            <param name="createInstance">The create instance function.</param>
        </member>
        <member name="M:SixPack.Collections.Generic.SingletonFactory`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Collections.Generic.SingletonFactory`2"/> class.
            </summary>
        </member>
        <member name="P:SixPack.Collections.Generic.SingletonFactory`2.Item(`0)">
            <summary>
            Gets the <typeparamref name="TSingleton"/> with the specified key. If the object has not been created yet,
            a new instance is created using the createInstance function that was specified in the constructor.
            </summary>
            <value></value>
        </member>
        <member name="T:SixPack.Collections.Generic.Trie`2">
            <summary>
            Generic implementation of a trie, or prefix tree (http://en.wikipedia.org/wiki/Trie).
            </summary>
            <typeparam name="TAtom">The type of the atom.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:SixPack.Collections.Generic.Trie`2.#ctor(SixPack.Collections.Generic.ITrieDomain{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Collections.Generic.Trie`2"/> class.
            </summary>
            <param name="domain">The domain of the atoms.</param>
        </member>
        <member name="M:SixPack.Collections.Generic.Trie`2.Add(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary>
            Adds the specified key-value pair to the trie.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Trie`2.PrefixMatch(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Searches for all the key-value pairs whose key starts with the specified prefix.
            </summary>
        </member>
        <member name="M:SixPack.Collections.Generic.Trie`2.ContainsKey(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether this trie contains the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SixPack.Collections.Generic.Trie`2.All">
            <summary>
            Gets all the key-value pairs currently in the trie.
            </summary>
        </member>
        <member name="T:SixPack.ComponentModel.GenericTypeConverter`1">
            <summary>
            Generic implementation of <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SixPack.ComponentModel.GenericTypeConverter`1.CanConvertFrom``1(System.Func{System.Globalization.CultureInfo,``0,`0})">
            <summary>
            Registers a conversion function that converts from the specified type.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="converter">The conversion function.</param>
        </member>
        <member name="M:SixPack.ComponentModel.GenericTypeConverter`1.CanConvertFrom``1(System.Func{``0,`0})">
            <summary>
            Registers a conversion function that converts from the specified type.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="converter">The conversion function.</param>
        </member>
        <member name="M:SixPack.ComponentModel.GenericTypeConverter`1.CanConvertTo``1(System.Func{System.Globalization.CultureInfo,`0,``0})">
            <summary>
            Registers a conversion function that converts to the specified type.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="converter">The conversion function.</param>
        </member>
        <member name="M:SixPack.ComponentModel.GenericTypeConverter`1.CanConvertTo``1(System.Func{`0,``0})">
            <summary>
            Registers a conversion function that converts to the specified type.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="converter">The conversion function.</param>
        </member>
        <member name="M:SixPack.ComponentModel.GenericTypeConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:SixPack.ComponentModel.GenericTypeConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:SixPack.ComponentModel.GenericTypeConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:SixPack.ComponentModel.GenericTypeConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:SixPack.ComponentModel.TypeConverter">
            <summary>
            Performs type conversions using every standard provided by the .NET library.
            </summary>
        </member>
        <member name="M:SixPack.ComponentModel.TypeConverter.RegisterTypeConverter``2">
            <summary>
            Registers a <see cref="T:System.ComponentModel.TypeConverter"/> dynamically.
            </summary>
            <typeparam name="TConvertible">The type to which the coverter should be associated.</typeparam>
            <typeparam name="TConverter">The type of the converter.</typeparam>
        </member>
        <member name="M:SixPack.ComponentModel.TypeConverter.ChangeType``1(System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <typeparam name="T">The type to which the value is to be converted.</typeparam>
            <param name="value">The value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.ComponentModel.TypeConverter.ChangeType``1(System.Object,System.IFormatProvider)">
            <summary>
            Converts the specified value.
            </summary>
            <typeparam name="T">The type to which the value is to be converted.</typeparam>
            <param name="value">The value to convert.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.ComponentModel.TypeConverter.ChangeType``1(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <typeparam name="T">The type to which the value is to be converted.</typeparam>
            <param name="value">The value to convert.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.ComponentModel.TypeConverter.ChangeType(System.Object,System.Type)">
            <summary>
            Converts the specified value using the invariant culture.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="destinationType">The type to which the value is to be converted.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.ComponentModel.TypeConverter.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="destinationType">The type to which the value is to be converted.</param>
            <param name="provider">The format provider.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.ComponentModel.TypeConverter.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="destinationType">The type to which the value is to be converted.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.ComponentModel.TypeConverter.TryParse``1(System.String)">
            <summary>
            Tries to parse the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.ComponentModel.TypeConverter.TryParse``1(System.String,SixPack.ComponentModel.TypeConverter.TryParseDelegate{``0})">
            <summary>
            Tries to parse the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value to be parsed.</param>
            <param name="parse">The parse function.</param>
            <returns></returns>
        </member>
        <member name="T:SixPack.ComponentModel.TypeConverter.TryParseDelegate`1">
            <summary>
            Defines a method that is used to tentatively parse a string.
            </summary>
        </member>
        <member name="T:SixPack.Configuration.SimpleConfigurationSection`1">
            <summary>
            Implements a configuration section handler that uses XML serialization to read the content.
            </summary>
            <example>
            	&lt;section name="test" type="SixPack.Configuration.SimpleConfigurationSection`1[[MyProject.MySection, MyProject]], SixPack" /&gt;
            </example>
            <typeparam name="TConfiguration">The type of the configuration.</typeparam>
        </member>
        <member name="M:SixPack.Configuration.SimpleConfigurationSection`1.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="section">Section XML node.</param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="T:SixPack.Data.CommandWrapper">
            <summary>
            Façade for SqlCommand
            </summary>
        </member>
        <member name="M:SixPack.Data.CommandWrapper.#ctor(System.Data.Common.DbCommand,System.Data.Common.DbProviderFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Data.CommandWrapper"/> class.
            </summary>
            <param name="dbCommand">The db command.</param>
            <param name="dbProviderFactory">The db provider factory.</param>
        </member>
        <member name="M:SixPack.Data.CommandWrapper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SixPack.Data.CommandWrapper.GetOutputParameter(System.String)">
            <summary>
            Gets the value of the specified output parameter.
            </summary>
            <param name="name">The name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.CommandWrapper.GetOutputParameters(System.Int32)">
            <summary>
            Gets the value of the output parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.CommandWrapper.AddParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            Adds an input parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="parType">Type of the par.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:SixPack.Data.CommandWrapper.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Adds an output parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="parType">Type of the par.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:SixPack.Data.CommandWrapper.AddParameter(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Adds a parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="parType">Type of the par.</param>
            <param name="size">The size.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:SixPack.Data.CommandWrapper.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:SixPack.Data.CommandWrapper"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:SixPack.Data.CommandWrapper"/>.
            </returns>
        </member>
        <member name="M:SixPack.Data.CommandWrapper.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:SixPack.Data.CommandWrapper.DbCommand">
            <summary>
            Gets the db command.
            </summary>
            <value>The db command.</value>
        </member>
        <member name="T:SixPack.Data.DataCollection`1">
            <summary>
            Collection of Data Transfer Objects
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SixPack.Data.IDataLoader">
            <summary>
            Collection of Data Transfer Objects
            </summary>
        </member>
        <member name="M:SixPack.Data.IDataLoader.Load(System.Data.DataTable)">
            <summary>
            Loads a DataCollection by parsing a DataTable
            It does not remove current items.
            </summary>
            <param name="dataTable">The data table.</param>
        </member>
        <member name="M:SixPack.Data.IDataLoader.Load(System.Data.DataRow[])">
            <summary>
            Loads a DataCollection by parsing a DataRow[]
            It does not remove current items.
            </summary>
            <param name="dataRowArray">The data row array.</param>
        </member>
        <member name="M:SixPack.Data.DataCollection`1.Load(System.Data.DataTable)">
            <summary>
            Loads a DataCollection by parsing a DataTable
            It does not remove current items.
            </summary>
            <param name="dataTable">The data table.</param>
        </member>
        <member name="M:SixPack.Data.DataCollection`1.Load(System.Data.DataRow[])">
            <summary>
            Loads a DataCollection by parsing a DataRow[]
            It does not remove current items.
            </summary>
            <param name="dataRowArray">The data row array.</param>
        </member>
        <member name="T:SixPack.Data.IDataObject">
            <summary>
            Inferface to be implemented by Data Objects.
            </summary>
        </member>
        <member name="M:SixPack.Data.IDataObject.Load(System.Data.DataRow)">
            <summary>
            Loads the contents of the object by parsing a DataRow.
            </summary>
            <param name="dr">A DataRow object containing the values to be loaded by the object</param>
        </member>
        <member name="T:SixPack.Data.StoredProcedure">
            <summary>
            This class is used to wrap and execute stored procedures.
            </summary>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.InitializeDefaultConnectionString">
            <summary>
            Initializes the default connection string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.GetConnectionString(System.String)">
            <summary>
            Gets the connection string with the specified name from the cache.
            </summary>
            <param name="name">The name of the connection string.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.#ctor(System.String,SixPack.Data.StoredProcedure.ConnectionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Data.StoredProcedure"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="connectionInfo">The cached connection string information.</param>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Data.StoredProcedure"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="connectionStringName">Name of the connection string.</param>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Data.StoredProcedure"/> class using the first connection string as connection.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Data.StoredProcedure"/> class using the first connection string as connection.
            </summary>
            <param name="name">The name.</param>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">The name of the data provider, e.g. System.Data.OleDb.</param>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.GetOutputParameter(System.String)">
            <summary>
            Gets the value of the specified output parameter.
            </summary>
            <param name="name">The name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.createDbConnection">
            <summary>
            Creates the database connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.createDbDataAdapter">
            <summary>
            Creates the db data adapter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.Execute``1(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,SixPack.Data.StoredProcedure.ExecuteDelegate{``0})">
            <summary>
            Executes the stoted procedure.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">The connection to use.</param>
            <param name="transaction">The transaction to use.</param>
            <param name="executeMethod">The method that actually executes the stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.ExecuteInternal``1(SixPack.Data.StoredProcedure.ExecuteDelegate{``0})">
            <summary>
            Executes the stored procedure.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="executeMethod">The method that actually executes the stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.ExecuteInternal``1(System.Data.Common.DbTransaction,SixPack.Data.StoredProcedure.ExecuteDelegate{``0})">
            <summary>
            Executes the stored procedure.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="transaction">The transaction to use.</param>
            <param name="executeMethod">The method that actually executes the stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.ExecuteInternal``1(System.Data.Common.DbConnection,SixPack.Data.StoredProcedure.ExecuteDelegate{``0})">
            <summary>
            Executes the stored procedure.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">The connection to use.</param>
            <param name="executeMethod">The method that actually executes the stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.Execute">
            <summary>
            Executes this instance, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalExecute"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.Execute(System.Data.Common.DbTransaction)">
            <summary>
            Executes this instance, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalExecute"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <param name="transaction">The transaction on which the stored procedure should be executed.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.Execute(System.Data.Common.DbConnection)">
            <summary>
            Executes this instance, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalExecute"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <param name="connection">The connection to be used.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.InternalExecute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.Execute``1(``0@)">
            <summary>
            Executes this instance, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalExecute"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <typeparam name="TParameter">The type of the param.</typeparam>
            <param name="parameter">The output parameter of the stored procedure.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.Execute``1(System.Data.Common.DbTransaction,``0@)">
            <summary>
            Executes this instance, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalExecute"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <typeparam name="TParameter">The type of the param.</typeparam>
            <param name="transaction">The transaction on which the stored procedure should be executed.</param>
            <param name="parameter">The output parameter of the stored procedure.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.Execute``1(System.Data.Common.DbConnection,``0@)">
            <summary>
            Executes this instance, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalExecute"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <typeparam name="TParameter">The type of the param.</typeparam>
            <param name="connection">The connection to be used.</param>
            <param name="parameter">The output parameter of the stored procedure.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.Execute``2(``0@,``1@)">
            <summary>
            Executes this instance, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalExecute"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <typeparam name="TFirstParameter">The type of the first param.</typeparam>
            <typeparam name="TSecondParameter">The type of the second param.</typeparam>
            <param name="firstParameter">The first output parameter of the stored procedure.</param>
            <param name="secondParameter">The second output parameter of the stored procedure.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.Execute``2(System.Data.Common.DbTransaction,``0@,``1@)">
            <summary>
            Executes this instance, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalExecute"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <typeparam name="TFirstParameter">The type of the first param.</typeparam>
            <typeparam name="TSecondParameter">The type of the second param.</typeparam>
            <param name="transaction">The transaction on which the stored procedure should be executed.</param>
            <param name="firstParameter">The first output parameter of the stored procedure.</param>
            <param name="secondParameter">The second output parameter of the stored procedure.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.Execute``2(System.Data.Common.DbConnection,``0@,``1@)">
            <summary>
            Executes this instance, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalExecute"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <typeparam name="TFirstParameter">The type of the first param.</typeparam>
            <typeparam name="TSecondParameter">The type of the second param.</typeparam>
            <param name="connection">The connection to be used.</param>
            <param name="firstParameter">The first output parameter of the stored procedure.</param>
            <param name="secondParameter">The second output parameter of the stored procedure.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.Execute``3(``0@,``1@,``2@)">
            <summary>
            Executes this instance, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalExecute"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <typeparam name="TFirstParameter">The type of the first param.</typeparam>
            <typeparam name="TSecondParameter">The type of the second param.</typeparam>
            <typeparam name="TThirdParameter">The type of the third param.</typeparam>
            <param name="firstParameter">The first output parameter of the stored procedure.</param>
            <param name="secondParameter">The second output parameter of the stored procedure.</param>
            <param name="thirdParameter">The third output parameter of the stored procedure.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.Execute``3(System.Data.Common.DbTransaction,``0@,``1@,``2@)">
            <summary>
            Executes this instance, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalExecute"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <typeparam name="TFirstParameter">The type of the first param.</typeparam>
            <typeparam name="TSecondParameter">The type of the second param.</typeparam>
            <typeparam name="TThirdParameter">The type of the third param.</typeparam>
            <param name="transaction">The transaction on which the stored procedure should be executed.</param>
            <param name="firstParameter">The first output parameter of the stored procedure.</param>
            <param name="secondParameter">The second output parameter of the stored procedure.</param>
            <param name="thirdParameter">The third output parameter of the stored procedure.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.Execute``3(System.Data.Common.DbConnection,``0@,``1@,``2@)">
            <summary>
            Executes this instance, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalExecute"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <typeparam name="TFirstParameter">The type of the first param.</typeparam>
            <typeparam name="TSecondParameter">The type of the second param.</typeparam>
            <typeparam name="TThirdParameter">The type of the third param.</typeparam>
            <param name="connection">The connection to be used.</param>
            <param name="firstParameter">The first output parameter of the stored procedure.</param>
            <param name="secondParameter">The second output parameter of the stored procedure.</param>
            <param name="thirdParameter">The third output parameter of the stored procedure.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.ExecuteScalar">
            <summary>
            Executes this instance returning a scalar, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalExecuteScalar"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.ExecuteScalar(System.Data.Common.DbTransaction)">
            <summary>
            Executes this instance returning a scalar, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalExecuteScalar"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <param name="transaction">The transaction on which the stored procedure should be executed.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.ExecuteScalar(System.Data.Common.DbConnection)">
            <summary>
            Executes this instance returning a scalar, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalExecuteScalar"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <param name="connection">The connection to be used.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.InternalExecuteScalar">
            <summary>
            Executes this instance returning a scalar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.GetDataSet">
            <summary>
            Executes the stored procedure and returns the results as a DataSet, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalGetDataSet"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.GetDataSet(System.Data.Common.DbTransaction)">
            <summary>
            Executes the stored procedure and returns the results as a DataSet, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalGetDataSet"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <param name="transaction">The transaction on which the stored procedure should be executed.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.GetDataSet(System.Data.Common.DbConnection)">
            <summary>
            Executes the stored procedure and returns the results as a DataSet, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalGetDataSet"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <param name="connection">The connection to be used.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.InternalGetDataSet">
            <summary>
            Executes the stored procedure and returns the results as a DataSet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.GetDataTable">
            <summary>
            Executes the stored procedure and returns the results as a DataTable, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalGetDataSet"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.GetDataTable(System.Data.Common.DbTransaction)">
            <summary>
            Executes the stored procedure and returns the results as a DataTable, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalGetDataSet"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <param name="transaction">The transaction on which the stored procedure should be executed.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.GetDataTable(System.Data.Common.DbConnection)">
            <summary>
            Executes the stored procedure and returns the results as a DataTable, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalGetDataSet"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <param name="connection">The connection to be used.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.GetFirstTable(System.Data.DataSet)">
            <summary>
            Returns the first table of a <see cref="T:System.Data.DataSet"/>, or null if the <see cref="T:System.Data.DataSet"/> is empty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.GetList``1">
            <summary>
            Executes the stored procedure and returns the results as an <see cref="T:System.Collections.Generic.IList`1"/>, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalGetList``1"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.GetList``1(System.Data.Common.DbTransaction)">
            <summary>
            Executes the stored procedure and returns the results as an <see cref="T:System.Collections.Generic.IList`1"/>, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalGetList``1"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <param name="transaction">The transaction on which the stored procedure should be executed.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.GetList``1(System.Data.Common.DbConnection)">
            <summary>
            Executes the stored procedure and returns the results as an <see cref="T:System.Collections.Generic.IList`1"/>, by calling <see cref="M:SixPack.Data.StoredProcedure.InternalGetList``1"/>.
            Handles deadlock retries for Sql Server connections.
            </summary>
            <param name="connection">The connection to be used.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.InternalGetList``1">
            <summary>
            Executes the stored procedure and returns the results as an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.AddParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            Adds an input parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="parType">Type of the parameter.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.AddParameter(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Adds a parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="parType">Type of the parameter.</param>
            <param name="size">The size.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Adds an output parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="parType">Type of the par.</param>
            <param name="size">The size.</param>
        </member>
        <member name="P:SixPack.Data.StoredProcedure.Command">
            <summary>
            Gets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="T:SixPack.Data.StoredProcedure.ConnectionInfo">
            <summary>
            Contains a connection string and a <see cref="T:System.Data.Common.DbProviderFactory"/>.
            </summary>
        </member>
        <member name="M:SixPack.Data.StoredProcedure.ConnectionInfo.#ctor(System.Configuration.ConnectionStringSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Data.StoredProcedure.ConnectionInfo"/> class.
            </summary>
            <param name="css">The CSS.</param>
        </member>
        <member name="P:SixPack.Data.StoredProcedure.ConnectionInfo.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SixPack.Data.StoredProcedure.ConnectionInfo.ProviderFactory">
            <summary>
            Gets the provider factory.
            </summary>
            <value>The provider factory.</value>
        </member>
        <member name="T:SixPack.Data.StoreProcedureInvokerAttribute">
            <summary>
             Methods with this attribute invoke a stored procedure and return a dataset.
            </summary>
        </member>
        <member name="T:SixPack.Diagnostics.ILog">
            <summary>
            Defines the interface for any log implementation.
            </summary>
        </member>
        <member name="M:SixPack.Diagnostics.ILog.HandleException(System.Exception)">
            <summary>
            Logs an exception
            </summary>
            <param name="exception">The exception to log</param>
        </member>
        <member name="M:SixPack.Diagnostics.ILog.AddFormat(System.String,System.Object)">
            <summary>
            Adds a line to the log with format.
            </summary>
            <param name="format">The format.</param>
            <param name="arg0">The object.</param>
        </member>
        <member name="M:SixPack.Diagnostics.ILog.AddFormat(System.String,System.Object,SixPack.Diagnostics.LogLevel)">
            <summary>
            Adds a line to the log with format.
            </summary>
            <param name="format">The format.</param>
            <param name="arg0">The object.</param>
            <param name="logLevel">The log level.</param>
        </member>
        <member name="M:SixPack.Diagnostics.ILog.AddFormat(System.String,System.Object,System.Object)">
            <summary>
            Adds a line to the log with format.
            </summary>
            <param name="format">The format.</param>
            <param name="arg0">The object.</param>
            <param name="arg1">Another object.</param>
        </member>
        <member name="M:SixPack.Diagnostics.ILog.AddFormat(System.String,System.Object,System.Object,SixPack.Diagnostics.LogLevel)">
            <summary>
            Adds a line to the log with format.
            </summary>
            <param name="format">The format.</param>
            <param name="arg0">The object.</param>
            <param name="arg1">Another object.</param>
            <param name="logLevel">The log level.</param>
        </member>
        <member name="M:SixPack.Diagnostics.ILog.AddFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Adds a line to the log with format.
            </summary>
            <param name="format">The format.</param>
            <param name="arg0">The object.</param>
            <param name="arg1">Another object.</param>
            <param name="arg2">Yet another object.</param>
        </member>
        <member name="M:SixPack.Diagnostics.ILog.AddFormat(System.String,System.Object,System.Object,System.Object,SixPack.Diagnostics.LogLevel)">
            <summary>
            Adds a line to the log with format.
            </summary>
            <param name="format">The format.</param>
            <param name="arg0">The object.</param>
            <param name="arg1">Another object.</param>
            <param name="arg2">Yet another object.</param>
            <param name="logLevel">The log level.</param>
        </member>
        <member name="M:SixPack.Diagnostics.ILog.AddFormat(System.String,System.Object[],SixPack.Diagnostics.LogLevel)">
            <summary>
            Adds a line to the log with format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The object array.</param>
            <param name="logLevel">The log level.</param>
        </member>
        <member name="M:SixPack.Diagnostics.ILog.AddFormat(System.String,System.Object[])">
            <summary>
            Adds a line to the log with format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The object array.</param>
        </member>
        <member name="M:SixPack.Diagnostics.ILog.HandleException(System.Exception,SixPack.Diagnostics.LogLevel)">
            <summary>
            Logs an exception
            </summary>
            <param name="exception">The exception to log</param>
            <param name="logLevel">The severity of the corresponding message</param>
        </member>
        <member name="M:SixPack.Diagnostics.ILog.Add(System.String)">
            <summary>
            Adds a line to the log
            </summary>
            <param name="text">The message to add</param>
        </member>
        <member name="M:SixPack.Diagnostics.ILog.Add(System.String,SixPack.Diagnostics.LogLevel)">
            <summary>
            Adds a line to the log
            </summary>
            <param name="text">The message to add</param>
            <param name="logLevel">The severity of the corresponding message</param>
        </member>
        <member name="T:SixPack.Diagnostics.Log">
            <summary>
            Use this class to log messages for later consumption
            </summary>
            <remarks>
            If the appSettings configuration section contains a key named SixPackLogImplementation, and
            that entry contains the name of a type, the code uses that implementation instead of
            the default one. That implementation must implement the <see cref="T:SixPack.Diagnostics.ILog"/> interface and have
            a parameterless constructor.
            </remarks>
        </member>
        <member name="T:SixPack.Diagnostics.LogBase">
            <summary>
            Basic implementation of the <see cref="T:SixPack.Diagnostics.ILog"/> interface.
            </summary>
        </member>
        <member name="M:SixPack.Diagnostics.LogBase.HandleException(System.Exception)">
            <summary>
            Logs an exception
            </summary>
            <param name="exception">The exception to log</param>
        </member>
        <member name="M:SixPack.Diagnostics.LogBase.AddFormat(System.String,System.Object)">
            <summary>
            Adds a line to the log with format.
            </summary>
            <param name="format">The format.</param>
            <param name="arg0">The object.</param>
        </member>
        <member name="M:SixPack.Diagnostics.LogBase.AddFormat(System.String,System.Object,SixPack.Diagnostics.LogLevel)">
            <summary>
            Adds a line to the log with format.
            </summary>
            <param name="format">The format.</param>
            <param name="arg0">The object.</param>
            <param name="logLevel">The log level.</param>
        </member>
        <member name="M:SixPack.Diagnostics.LogBase.AddFormat(System.String,System.Object,System.Object)">
            <summary>
            Adds a line to the log with format.
            </summary>
            <param name="format">The format.</param>
            <param name="arg0">The object.</param>
            <param name="arg1">Another object.</param>
        </member>
        <member name="M:SixPack.Diagnostics.LogBase.AddFormat(System.String,System.Object,System.Object,SixPack.Diagnostics.LogLevel)">
            <summary>
            Adds a line to the log with format.
            </summary>
            <param name="format">The format.</param>
            <param name="arg0">The object.</param>
            <param name="arg1">Another object.</param>
            <param name="logLevel">The log level.</param>
        </member>
        <member name="M:SixPack.Diagnostics.LogBase.AddFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Adds a line to the log with format.
            </summary>
            <param name="format">The format.</param>
            <param name="arg0">The object.</param>
            <param name="arg1">Another object.</param>
            <param name="arg2">Yet another object.</param>
        </member>
        <member name="M:SixPack.Diagnostics.LogBase.AddFormat(System.String,System.Object,System.Object,System.Object,SixPack.Diagnostics.LogLevel)">
            <summary>
            Adds a line to the log with format.
            </summary>
            <param name="format">The format.</param>
            <param name="arg0">The object.</param>
            <param name="arg1">Another object.</param>
            <param name="arg2">Yet another object.</param>
            <param name="logLevel">The log level.</param>
        </member>
        <member name="M:SixPack.Diagnostics.LogBase.AddFormat(System.String,System.Object[],SixPack.Diagnostics.LogLevel)">
            <summary>
            Adds a line to the log with format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The object array.</param>
            <param name="logLevel">The log level.</param>
        </member>
        <member name="M:SixPack.Diagnostics.LogBase.AddFormat(System.String,System.Object[])">
            <summary>
            Adds a line to the log with format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The object array.</param>
        </member>
        <member name="M:SixPack.Diagnostics.LogBase.HandleException(System.Exception,SixPack.Diagnostics.LogLevel)">
            <summary>
            Logs an exception
            </summary>
            <param name="exception">The exception to log</param>
            <param name="logLevel">The severity of the corresponding message</param>
        </member>
        <member name="M:SixPack.Diagnostics.LogBase.Add(System.String)">
            <summary>
            Adds a line to the log
            </summary>
            <param name="text">The message to add</param>
        </member>
        <member name="M:SixPack.Diagnostics.LogBase.Add(System.String,SixPack.Diagnostics.LogLevel)">
            <summary>
            Adds a line to the log
            </summary>
            <param name="text">The message to add</param>
            <param name="logLevel">The severity of the corresponding message</param>
        </member>
        <member name="M:SixPack.Diagnostics.Log.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:SixPack.Diagnostics.Log"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:SixPack.Diagnostics.Log.Add(System.String,SixPack.Diagnostics.LogLevel)">
            <summary>
            Adds a line to the log
            </summary>
            <param name="text">The message to add</param>
            <param name="logLevel">The severity of the corresponding message</param>
        </member>
        <member name="P:SixPack.Diagnostics.Log.CurrentLogFile">
            <summary>
            Gets the current log file.
            </summary>
            <value>The current log file.</value>
        </member>
        <member name="P:SixPack.Diagnostics.Log.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:SixPack.Diagnostics.HighResolutionTimer">
            <summary>
            High resolution timer class
            </summary>
        </member>
        <member name="M:SixPack.Diagnostics.HighResolutionTimer.Sample">
            <summary>
            Returns a value that can be used to calculate the time interval between two samples.
            </summary>
        </member>
        <member name="M:SixPack.Diagnostics.HighResolutionTimer.Duration(SixPack.Diagnostics.TimerSample,SixPack.Diagnostics.TimerSample)">
            <summary>
            Gets the time elapsed between <paramref name="startTime"/> and <paramref name="endTime" />.
            </summary>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <returns></returns>
            <remarks>
            This method is safe for using in a multithreaded environment.
            </remarks>
        </member>
        <member name="M:SixPack.Diagnostics.HighResolutionTimer.Start">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:SixPack.Diagnostics.HighResolutionTimer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:SixPack.Diagnostics.HighResolutionTimer.Duration(System.Int32)">
            <summary>
            Returns the elapsed duration given the number of iterations
            </summary>
            <param name="iterations">The iterations.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Diagnostics.HighResolutionTimer.TimeToSeconds(System.Double)">
            <summary>
            Converts the specified time to seconds.
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Diagnostics.HighResolutionTimer.TimeToMilliseconds(System.Double)">
            <summary>
            Converts the specified time to milliseconds.
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Diagnostics.HighResolutionTimer.TimeToTimeSpan(System.Double)">
            <summary>
            Converts the specified time to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="T:SixPack.Diagnostics.LogLevel">
            <summary>
            Specifies the severity of a log message.
            </summary>
        </member>
        <member name="F:SixPack.Diagnostics.LogLevel.None">
            <summary>
            Will not be logged.
            </summary>
        </member>
        <member name="F:SixPack.Diagnostics.LogLevel.Debug">
            <summary>
            Debug
            </summary>
        </member>
        <member name="F:SixPack.Diagnostics.LogLevel.Info">
            <summary>
            Information
            </summary>
        </member>
        <member name="F:SixPack.Diagnostics.LogLevel.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:SixPack.Diagnostics.LogLevel.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:SixPack.Diagnostics.LogLevel.Critical">
            <summary>
            Critical error
            </summary>
        </member>
        <member name="T:SixPack.Diagnostics.NullLog">
            <summary>
            An <see cref="T:SixPack.Diagnostics.ILog"/> implementation that does nothing.
            </summary>
        </member>
        <member name="M:SixPack.Diagnostics.NullLog.Add(System.String,SixPack.Diagnostics.LogLevel)">
            <summary>
            Adds a line to the log
            </summary>
            <param name="text">The message to add</param>
            <param name="logLevel">The severity of the corresponding message</param>
        </member>
        <member name="T:SixPack.Diagnostics.TimerSample">
            <summary>
            Value that can be used to calculate a time interval.
            </summary>
        </member>
        <member name="M:SixPack.Diagnostics.TimerSample.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Diagnostics.TimerSample"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SixPack.Diagnostics.TimerSample.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:SixPack.Diagnostics.TimerSample.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:SixPack.Diagnostics.TimerSample.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:SixPack.Diagnostics.TimerSample.Equals(SixPack.Diagnostics.TimerSample)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:SixPack.Diagnostics.TimerSample.op_Equality(SixPack.Diagnostics.TimerSample,SixPack.Diagnostics.TimerSample)">
            <summary>
            Implements the operator ==.
            </summary>
        </member>
        <member name="M:SixPack.Diagnostics.TimerSample.op_Inequality(SixPack.Diagnostics.TimerSample,SixPack.Diagnostics.TimerSample)">
            <summary>
            Implements the operator !=.
            </summary>
        </member>
        <member name="T:SixPack.Drawing.CaptchaImage">
            <summary>
            Generates CAPTCHA images
            </summary>
        </member>
        <member name="M:SixPack.Drawing.CaptchaImage.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Drawing.CaptchaImage"/> class.
            </summary>
            <param name="text">The s.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:SixPack.Drawing.CaptchaImage.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Drawing.CaptchaImage"/> class.
            </summary>
            <param name="text">The s.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="familyName">Name of the font family.</param>
        </member>
        <member name="M:SixPack.Drawing.CaptchaImage.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:SixPack.Drawing.CaptchaImage.Finalize">
            <summary>}
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:SixPack.Drawing.CaptchaImage"/> is reclaimed by garbage collection.
            </summary>}
        </member>
        <member name="M:SixPack.Drawing.CaptchaImage.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SixPack.Drawing.CaptchaImage.SetDimensions(System.Int32,System.Int32)">
            <summary>
            Sets the height and width of the image 
            </summary>
            <param name="_width">
            A <see cref="T:System.Int32"/> representing the width
            </param>
            <param name="_height">
            A <see cref="T:System.Int32"/> representing the height
            </param>
        </member>
        <member name="M:SixPack.Drawing.CaptchaImage.SetFamilyName(System.String)">
            <summary>
            Sets the family name of the font to be used 
            </summary>
            <param name="_familyName">
            A <see cref="T:System.String"/> representing the font name, e.g. "Arial"
            </param>
        </member>
        <member name="M:SixPack.Drawing.CaptchaImage.Generate">
            <summary>
            Generates the Captcha image 
            </summary>
            <returns>
            The Captcha image as a <see cref="P:SixPack.Drawing.CaptchaImage.Image"/>.
            </returns>
            <remarks>The method will generate the image and then cache it.</remarks>
        </member>
        <member name="P:SixPack.Drawing.CaptchaImage.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:SixPack.Drawing.CaptchaImage.Image">
            <summary>
            Gets the image.
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:SixPack.Drawing.CaptchaImage.Width">
            <summary>
            Gets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:SixPack.Drawing.CaptchaImage.Height">
            <summary>
            Gets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:SixPack.Drawing.CaptchaImage.ForegroundDark">
            <value>
            The dark foreground color  
            </value>
        </member>
        <member name="P:SixPack.Drawing.CaptchaImage.ForegroundLight">
            <value>
            The light foreground color 
            </value>
        </member>
        <member name="P:SixPack.Drawing.CaptchaImage.BackgroundDark">
            <value>
            The dark background color 
            </value>
        </member>
        <member name="P:SixPack.Drawing.CaptchaImage.BackgroundLight">
            <value>
            The light background color 
            </value>
        </member>
        <member name="P:SixPack.Drawing.CaptchaImage.FontStyle">
            <value>
            The style to be applied to the text 
            </value>
        </member>
        <member name="T:SixPack.Drawing.ImageSizing">
            <summary>
            This class provides methods for image sizing
            </summary>
        </member>
        <member name="M:SixPack.Drawing.ImageSizing.Resize(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Color,SixPack.Drawing.ImageResizeMethod)">
            <summary>
            Resizes the specified image.
            </summary>
            <param name="image">The image.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="background">The background color.</param>
            <param name="imageResizeMethod">The image resize method.</param>
            <returns></returns>
        </member>
        <member name="T:SixPack.Drawing.ImageResizeMethod">
            <summary>
            Represents the resize method to use
            </summary>
        </member>
        <member name="F:SixPack.Drawing.ImageResizeMethod.FullPadding">
            <summary>
            Image is scaled proportionally so it is as large as possible while fitting in the destination rectangle.
            Padding is added where needed so that the final size of the image corresponds to the passed parameters.
            </summary>
        </member>
        <member name="F:SixPack.Drawing.ImageResizeMethod.ScaleAndCrop">
            <summary>
            Image is scaled proportionally so it is as large as possible while fitting either horizontally or vertically in the destination rectangle.
            The image is then cropped to the size corresponding to the passed parameters.
            </summary>
        </member>
        <member name="F:SixPack.Drawing.ImageResizeMethod.HorizontalPadding">
            <summary>
            Image is scaled proportionally so it is as large as possible while fitting in the destination rectangle.
            Padding is added in the horizontal direction if needed so that the final height of the image corresponds to the passed parameters.
            The final width of the image can be equal or less than the passed width parameter.
            </summary>
        </member>
        <member name="F:SixPack.Drawing.ImageResizeMethod.VerticalPadding">
            <summary>
            Image is scaled proportionally so it is as large as possible while fitting in the destination rectangle.
            Padding is added in the vertical direction if needed so that the final height of the image corresponds to the passed parameters.
            The final width of the image can be equal or less than the passed width parameter.
            </summary>
        </member>
        <member name="F:SixPack.Drawing.ImageResizeMethod.ByWidth">
            <summary>
            Image is scaled proportionally so its width is equal to the passed parameter. Height is ignored.
            </summary>
        </member>
        <member name="F:SixPack.Drawing.ImageResizeMethod.ByHeight">
            <summary>
            Image is scaled proportionally so its height is equal to the passed parameter. Width is ignored.
            </summary>
        </member>
        <member name="F:SixPack.Drawing.ImageResizeMethod.NoPadding">
            <summary>
            Image is scaled proportionally so it is as large as possible while fitting in the destination rectangle.
            Height and width are less than or equal to the passwd parameters.
            </summary>
        </member>
        <member name="T:SixPack.EnumsInternalDoNotUse`1">
            <summary>
            This class is not called directly. Instead, use the Enums class. It has the same methods.
            </summary>
            <remarks>
            This class is a hack to work around a limitation in the C# compiler that does not let us
            declare generics type restrictions that force a type parameter to be an enum.
            </remarks>
        </member>
        <member name="M:SixPack.EnumsInternalDoNotUse`1.Parse``1(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The value to be parsed.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.EnumsInternalDoNotUse`1.Parse``1(System.String,System.Boolean)">
            <summary>
            Parses the specified value.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The value to be parsed.</param>
            <param name="ignoreCase">if set to <c>true</c> ignore case.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.EnumsInternalDoNotUse`1.GetValues``1">
            <summary>
            Gets the names and values of the constants in a specified enumeration.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <returns></returns>
        </member>
        <member name="M:SixPack.EnumsInternalDoNotUse`1.TryGetAssociatedValue``1(``0,System.Object@)">
            <summary>
            Gets the value associated to the specified enum field. Values are associated using <see cref="T:SixPack.EnumValueAttribute"/>.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value associated with the key.</param>
            <returns>
            If there is a value associated with the key, returns true; otherwise returns false.
            </returns>
        </member>
        <member name="M:SixPack.EnumsInternalDoNotUse`1.GetAssociatedValue``1(``0)">
            <summary>
            Gets the value associated to the specified enum field. Values are associated using <see cref="T:SixPack.EnumValueAttribute"/>.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:SixPack.Enums">
            <summary>
            Utility class for manipulating enums.
            </summary>
        </member>
        <member name="T:SixPack.EnumValueAttribute">
            <summary>
            Associates a value with an enum field.
            </summary>
        </member>
        <member name="M:SixPack.EnumValueAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.EnumValueAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SixPack.EnumValueAttribute.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.EnumValueAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SixPack.EnumValueAttribute.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.EnumValueAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SixPack.EnumValueAttribute.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.EnumValueAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SixPack.EnumValueAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.EnumValueAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SixPack.EnumValueAttribute.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.EnumValueAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SixPack.EnumValueAttribute.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.EnumValueAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SixPack.EnumValueAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.EnumValueAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SixPack.EnumValueAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.EnumValueAttribute"/> class.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:SixPack.EnumValueAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.EnumValueAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SixPack.EnumValueAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.EnumValueAttribute"/> class.
            </summary>
            <param name="type">The type of the value.</param>
            <param name="value">The string representation of the value.</param>
        </member>
        <member name="P:SixPack.EnumValueAttribute.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:SixPack.Func">
            <summary>
            Provides a syntax to declare variables of type Func&lt;...&gt; that return anonymous types.
            </summary>
        </member>
        <member name="M:SixPack.Func.CreateAnonymous``1(System.Func{``0})">
            <summary>
            Provides a syntax to declare variables of type Func&lt;TResult&gt; that return anonymous types.
            </summary>
        </member>
        <member name="M:SixPack.Func.CreateAnonymous``2(System.Func{``0,``1})">
            <summary>
            Provides a syntax to declare variables of type Func&lt;T1, TResult&gt; that return anonymous types.
            </summary>
        </member>
        <member name="M:SixPack.Func.CreateAnonymous``3(System.Func{``0,``1,``2})">
            <summary>
            Provides a syntax to declare variables of type Func&lt;T1, T2, TResult&gt; that return anonymous types.
            </summary>
        </member>
        <member name="M:SixPack.Func.CreateAnonymous``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Provides a syntax to declare variables of type Func&lt;T1, T2, T3, TResult&gt; that return anonymous types.
            </summary>
        </member>
        <member name="M:SixPack.Func.CreateAnonymous``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Provides a syntax to declare variables of type Func&lt;T1, T2, T3, T4, TResult&gt; that return anonymous types.
            </summary>
        </member>
        <member name="M:SixPack.Func.CreateAnonymous``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Provides a syntax to declare variables of type Func&lt;T1, T2, T3, T4, T5, TResult&gt; that return anonymous types.
            </summary>
        </member>
        <member name="M:SixPack.Func.CreateAnonymous``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Provides a syntax to declare variables of type Func&lt;T1, T2, T3, T4, T5, T6, TResult&gt; that return anonymous types.
            </summary>
        </member>
        <member name="M:SixPack.Func.CreateAnonymous``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Provides a syntax to declare variables of type Func&lt;T1, T2, T3, T4, T5, T6, T7, TResult&gt; that return anonymous types.
            </summary>
        </member>
        <member name="M:SixPack.Func.CreateAnonymous``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Provides a syntax to declare variables of type Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, TResult&gt; that return anonymous types.
            </summary>
        </member>
        <member name="T:SixPack.Globalization.Portugal.FiscalCode">
            <summary>
            Validates portuguese postal codes
            </summary>
        </member>
        <member name="F:SixPack.Globalization.Portugal.FiscalCode.fiscalCodePattern">
            <summary>
            Regex expression to validate a Portuguese Postal Code
            </summary>
        </member>
        <member name="M:SixPack.Globalization.Portugal.FiscalCode.IsValid(System.String)">
            <summary>
            Determines whether the specified fiscal code is valid.
            </summary>
            <param name="fiscalCode">The fiscal code.</param>
            <returns>
            	<c>true</c> if the specified fiscal code is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SixPack.Globalization.Portugal.PhoneNumber">
            <summary>
            Validates portuguese phone numbers
            </summary>
        </member>
        <member name="M:SixPack.Globalization.Portugal.PhoneNumber.GetType(System.String)">
            <summary>
            Gets the type of the specified phone number.
            </summary>
            <param name="phoneNumber">The phone number.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Globalization.Portugal.PhoneNumber.IsValid(System.String,SixPack.Globalization.Portugal.PhoneNumberTypes)">
            <summary>
            Determines whether the specified phone number is valid.
            </summary>
            <param name="phoneNumber">The phone number.</param>
            <param name="validTypes">The valid types.</param>
            <returns>
            	<c>true</c> if the specified phone number is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SixPack.Globalization.Portugal.PhoneNumberTypes">
            <summary>
            See http://www.anacom.pt/template12.jsp?categoryId=5344
            </summary>
        </member>
        <member name="F:SixPack.Globalization.Portugal.PhoneNumberTypes.None">
            <summary>
            Invalid phone number
            </summary>
        </member>
        <member name="F:SixPack.Globalization.Portugal.PhoneNumberTypes.International">
            <summary>
            International access prefix
            </summary>
        </member>
        <member name="F:SixPack.Globalization.Portugal.PhoneNumberTypes.ShortNumber">
            <summary>
            Short Numbers
            </summary>
        </member>
        <member name="F:SixPack.Globalization.Portugal.PhoneNumberTypes.FixedService">
            <summary>
            Fixed Telephone Service
            </summary>
        </member>
        <member name="F:SixPack.Globalization.Portugal.PhoneNumberTypes.NomadicService">
            <summary>
            Nomadic services
            </summary>
        </member>
        <member name="F:SixPack.Globalization.Portugal.PhoneNumberTypes.AudioText">
            <summary>
            Audiotext, Data Network Access, etc.
            </summary>
        </member>
        <member name="F:SixPack.Globalization.Portugal.PhoneNumberTypes.PrivateVoiceNetwork">
            <summary>
            Private Voice Network and Universal Access Services, etc
            </summary>
        </member>
        <member name="F:SixPack.Globalization.Portugal.PhoneNumberTypes.FreeServices">
            <summary>
            Free Services for the Caller, Virtual Call Card Services, Trunk Call Services, Personal Number
            </summary>
        </member>
        <member name="F:SixPack.Globalization.Portugal.PhoneNumberTypes.MobileCommunicationServices">
            <summary>
            Mobile Communications Services
            </summary>
        </member>
        <member name="F:SixPack.Globalization.Portugal.PhoneNumberTypes.PersonalNumber">
            <summary>
            Numbers that normal people have
            </summary>
        </member>
        <member name="F:SixPack.Globalization.Portugal.PhoneNumberTypes.CompanyNumber">
            <summary>
            Numbers that companies have
            </summary>
        </member>
        <member name="T:SixPack.Globalization.Portugal.PostalCode">
            <summary>
            Validates portuguese postal codes
            </summary>
        </member>
        <member name="F:SixPack.Globalization.Portugal.PostalCode.postalCodePattern">
            <summary>
            Regex expression to validate a Portuguese Postal Code
            </summary>
        </member>
        <member name="M:SixPack.Globalization.Portugal.PostalCode.IsValid(System.String)">
            <summary>
            Determines whether the specified postal code is valid.
            </summary>
            <param name="postalCode">The postal code.</param>
            <returns>
            	<c>true</c> if the specified postal code is valid Portuguese postal code; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SixPack.Globalization.Portugal.VatCode">
            <summary>
            Validates portuguese postal codes
            </summary>
        </member>
        <member name="F:SixPack.Globalization.Portugal.VatCode.vatCodePattern">
            <summary>
            Regex expression to validate a Portuguese Postal Code
            </summary>
        </member>
        <member name="M:SixPack.Globalization.Portugal.VatCode.IsValid(System.String)">
            <summary>
            Determines whether the specified VAT code is valid.
            </summary>
            <param name="vatCode">The VAT code.</param>
            <returns>
            	<c>true</c> if the specified VAT code is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SixPack.HashCode">
            <summary>
            Supports implementations of <see cref="M:System.Object.GetHashCode"/> by providing methods to combine two hash codes.
            </summary>
        </member>
        <member name="M:SixPack.HashCode.CombineHashCodes(System.Int32,System.Int32)">
            <summary>
            Combines two hash codes.
            </summary>
            <param name="h1">The first hash code.</param>
            <param name="h2">The second hash code.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.HashCode.Combine(System.Object,System.Object)">
            <summary>
            Combines the hash codes of multiple objects.
            </summary>
        </member>
        <member name="M:SixPack.HashCode.Combine(System.Object,System.Object,System.Object)">
            <summary>
            Combines the hash codes of multiple objects.
            </summary>
        </member>
        <member name="M:SixPack.HashCode.Combine(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Combines the hash codes of multiple objects.
            </summary>
        </member>
        <member name="M:SixPack.HashCode.Combine(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Combines the hash codes of multiple objects.
            </summary>
        </member>
        <member name="M:SixPack.HashCode.Combine(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Combines the hash codes of multiple objects.
            </summary>
        </member>
        <member name="M:SixPack.HashCode.Combine(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Combines the hash codes of multiple objects.
            </summary>
        </member>
        <member name="M:SixPack.HashCode.Combine(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Combines the hash codes of multiple objects.
            </summary>
        </member>
        <member name="M:SixPack.HashCode.Add(System.Int32)">
            <summary>
            Creates a <see cref="T:SixPack.HashCodeBuilder"/> that can be used to generate a hash code using a fluent interface.
            </summary>
            <param name="hashCode">The initial hash code.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.HashCode.Add(System.Object)">
            <summary>
            Creates a <see cref="T:SixPack.HashCodeBuilder"/> that can be used to generate a hash code using a fluent interface.
            </summary>
            <param name="value">The object whose hash code will be the initial hash code.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.HashCode.AddRange(System.Collections.IEnumerable)">
            <summary>
            Creates a <see cref="T:SixPack.HashCodeBuilder"/> that can be used to generate a hash code using a fluent interface.
            </summary>
        </member>
        <member name="T:SixPack.HashCodeBuilder">
            <summary>
            Provides a fluent interface for generating a hash code based on multiple fields.
            </summary>
        </member>
        <member name="M:SixPack.HashCodeBuilder.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.HashCodeBuilder"/> struct.
            </summary>
            <param name="hashCode">The hash code.</param>
        </member>
        <member name="M:SixPack.HashCodeBuilder.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.HashCodeBuilder"/> struct.
            </summary>
        </member>
        <member name="M:SixPack.HashCodeBuilder.SafeGetHashCode(System.Object)">
            <summary>
            Gets a hash code for the specified object.
            </summary>
        </member>
        <member name="M:SixPack.HashCodeBuilder.Add(System.Int32)">
            <summary>
            Adds the specified hash code.
            </summary>
            <param name="hashCode">The hash code.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.HashCodeBuilder.Add(System.Object)">
            <summary>
            Adds the hash code of the specified object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.HashCodeBuilder.AddRange(System.Collections.IEnumerable)">
            <summary>
            Adds the hash code of the specified objects.
            </summary>
        </member>
        <member name="M:SixPack.HashCodeBuilder.op_Implicit(SixPack.HashCodeBuilder)~System.Int32">
            <summary>
            Performs an implicit conversion from <see cref="T:SixPack.HashCodeBuilder"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:SixPack.Net.Dns">
            <summary>
            Dns provides advanced DNS lookup capabilities.
            </summary>
        </member>
        <member name="M:SixPack.Net.Dns.GetMXRecords(System.String)">
            <summary>
            Gets the MX records.
            </summary>
            <param name="domain">The domain.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Net.Dns.GetResolvedMXRecords(System.String)">
            <summary>
            Gets the resolved MX records.
            </summary>
            <param name="domain">The domain.</param>
            <returns></returns>
        </member>
        <member name="T:SixPack.Net.IPAddressFormat">
            <summary>
            Validates IP addresses
            </summary>
        </member>
        <member name="F:SixPack.Net.IPAddressFormat.ipAddressPattern">
            <summary>
            Regex expression to validate an IP address
            </summary>
        </member>
        <member name="M:SixPack.Net.IPAddressFormat.IsValid(System.String)">
            <summary>
            Determines whether the specified ip address is valid.
            </summary>
            <param name="ipAddress">The ip address.</param>
            <returns>
            	<c>true</c> if the specified ip address is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SixPack.Net.Mail.EmailAddress">
            <summary>
            Validates an email address
            </summary>
        </member>
        <member name="M:SixPack.Net.Mail.EmailAddress.IsValid(System.String,SixPack.Net.Mail.MailSyntaxValidationMode,SixPack.Net.Mail.MailSemanticValidationMode)">
            <summary>
            Determines whether the specified email address is valid.
            </summary>
            <param name="emailAddress">The email address.</param>
            <param name="syntaxValidationMode">The syntax validation mode.</param>
            <param name="semanticValidationMode">The semantic validation mode.</param>
            <returns>
            	<c>true</c> if the specified email address is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SixPack.Net.Mail.EmailAddress.IsValid(System.String,SixPack.Net.Mail.MailSyntaxValidationMode)">
            <summary>
            Determines whether the specified email address is valid.
            </summary>
            <param name="emailAddress">The email address.</param>
            <param name="syntaxValidationMode">The syntax validation mode.</param>
            <returns>
            	<c>true</c> if the specified email address is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SixPack.Net.Mail.EmailAddress.IsValid(System.String,SixPack.Net.Mail.MailSemanticValidationMode)">
            <summary>
            Determines whether the specified email address is valid.
            </summary>
            <param name="emailAddress">The email address.</param>
            <param name="semanticValidationMode">The semantic validation mode.</param>
            <returns>
            	<c>true</c> if the specified email address is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SixPack.Net.Mail.EmailAddress.IsValid(System.String)">
            <summary>
            Determines whether the specified email address is valid.
            </summary>
            <param name="emailAddress">The email address.</param>
            <returns>
            	<c>true</c> if the specified email address is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:SixPack.Net.Mail.EmailAddress.rfc2822EmailAddressPattern">
            <summary>
            Regex expression to validate an Email address according to RFC 2822
            </summary>
        </member>
        <member name="F:SixPack.Net.Mail.EmailAddress.simpleEmailAddressPattern">
            <summary>
            Regex expression to validate an Email address in a simple, but efficient manner
            </summary>
        </member>
        <member name="T:SixPack.Net.XmlRpc">
            <summary>
            Support class for XML remote procedure calls.
            </summary>
        </member>
        <member name="M:SixPack.Net.XmlRpc.#ctor(System.Uri)">
            <summary>
            Creates a new instance of the <see cref="T:SixPack.Net.XmlRpc"/> class.
            </summary>
            <param name="requestUri">
            The <see cref="T:System.Uri"/> that is used for the request.
            </param>
            <exception cref="T:System.ArgumentNullException">The "requestUri" parameter was null.</exception>
            <exception cref="T:System.ArgumentException">The scheme for the "requestUri" must be either http or https.</exception>
        </member>
        <member name="M:SixPack.Net.XmlRpc.GetResponseXml">
            <summary>
            Makes a HTTP/HTTPS request and returns the result in a <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <returns>
            A <see cref="T:System.Xml.XmlReader"/> containing the response.
            </returns>
        </member>
        <member name="M:SixPack.Net.XmlRpc.GetResponse">
            <summary>
            Makes a HTTP/HTTPS request and returns the result in a <see cref="T:System.Net.HttpWebResponse"/>.
            </summary>
            <returns>
            A <see cref="T:System.Net.HttpWebResponse"/> containing the response.
            </returns>
        </member>
        <member name="M:SixPack.Net.XmlRpc.GetResponseDataSet">
            <summary>
            Makes a HTTP/HTTPS request and returns the result in a <see cref="T:System.Data.DataSet"/>.
            </summary>
            <returns>
            A <see cref="T:System.Data.DataSet"/> containing the response.
            </returns>
        </member>
        <member name="M:SixPack.Net.XmlRpc.GetResponseObject(System.Type)">
            <summary>
            Makes a HTTP/HTTPS request and returns the result in a deserialized object.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to use for deserialization.
            </param>
            <returns>
            A <see cref="T:System.Object"/> containing the response deserialized to the specified type. 
            </returns>
            <exception cref="T:System.ArgumentNullException">The parameter "type" is null.</exception>
        </member>
        <member name="M:SixPack.Net.XmlRpc.GetResponseObject(System.Type[])">
            <summary>
            Makes a HTTP/HTTPS request and returns the result in a deserialized object.
            </summary>
            <param name="types">
            An array of <see cref="T:System.Type"/> to be used for deserialization. If the first types fails, we will try the
            second and so on, until a compatible type is found or the array has been completely parsed.
            </param>
            <returns>
            A <see cref="T:System.Object"/> containing the response deserialized to the specified type. 
            </returns>
            <exception cref="T:System.ArgumentException">The array is empty.</exception>
            <exception cref="T:System.Xml.XmlException">No compatible type found.</exception>
        </member>
        <member name="M:SixPack.Net.XmlRpc.GetResponseObject(System.Xml.Serialization.XmlSerializer)">
            <summary>
            Makes a HTTP/HTTPS request and returns the result in a deserialized object.
            </summary>
            <param name="serializer">
            A <see cref="T:System.Xml.Serialization.XmlSerializer"/> to be used for deserialization;
            </param>
            <returns>
            A <see cref="T:System.Object"/> containing the response deserialized with the custom serializer. 
            </returns>
            <exception cref="T:System.ArgumentNullException">The parameter "serializer" is null.</exception>
        </member>
        <member name="P:SixPack.Net.XmlRpc.RequestUri">
            <value>
            Gets the <see cref="T:System.Uri"/> that is used for the request.
            </value>
        </member>
        <member name="P:SixPack.Net.XmlRpc.Timeout">
            <value>
            Gets or sets the request timeout in milliseconds.
            </value>
            <remarks>The default value is 2000 milliseconds.</remarks>
        </member>
        <member name="P:SixPack.Net.XmlRpc.Method">
            <value>
            Gets or sets the HTTP method that is used for the request.
            </value>
            <remarks>The default value is XmlRpcRequestMethod.Get.</remarks>
        </member>
        <member name="P:SixPack.Net.XmlRpc.Credentials">
            <value>
            Gets or sets the <see cref="T:System.Net.NetworkCredential"/> that is used for the request.
            </value>
        </member>
        <member name="P:SixPack.Net.XmlRpc.UserName">
            <value>
            Gets or sets the user name that is used for the request.
            </value>
        </member>
        <member name="P:SixPack.Net.XmlRpc.Password">
            <value>
            Gets or sets the password that is used for the request.
            </value>
        </member>
        <member name="P:SixPack.Net.XmlRpc.XslTransform">
            <summary>
            Gets or sets a XSL transform that will be applied to the response before further processing.
            </summary>
            <value>The XSL transform.</value>
        </member>
        <member name="T:SixPack.Net.XmlRpcRequestMethod">
            <summary>
            Represents the HTTP method to use to make an XML remote procedure call request.
            </summary>
        </member>
        <member name="F:SixPack.Net.XmlRpcRequestMethod.Get">
            <summary>
            Make the request using "GET"
            </summary>
        </member>
        <member name="F:SixPack.Net.XmlRpcRequestMethod.Post">
            <summary>
            Make the request using "POST"
            </summary>
        </member>
        <member name="T:SixPack.Security.Cryptography.Configuration.RsaSmallCodeParserSection">
            <summary>
            Defines the codes configuration section for use in the 'web.config' 
            configuration file, for configuring the codes validators/translators
            </summary>
        </member>
        <member name="M:SixPack.Security.Cryptography.Configuration.RsaSmallCodeParserSection.PostDeserialize">
            <summary>
            Called after deserialization.
            </summary>
        </member>
        <member name="P:SixPack.Security.Cryptography.Configuration.RsaSmallCodeParserSection.CodeLength">
            <summary>
            Code length used by the translator algorithm
            </summary>
        </member>
        <member name="P:SixPack.Security.Cryptography.Configuration.RsaSmallCodeParserSection.InitialAlphabet">
            <summary>
            Incoming alphabet
            </summary>
        </member>
        <member name="P:SixPack.Security.Cryptography.Configuration.RsaSmallCodeParserSection.FinalAlphabet">
            <summary>
            Outgoing alphabet
            </summary>
        </member>
        <member name="P:SixPack.Security.Cryptography.Configuration.RsaSmallCodeParserSection.PublicKey">
            <summary>
            Public key used to decrypt the codes
            </summary>
        </member>
        <member name="T:SixPack.Security.Cryptography.Configuration.RsaSmallPublicKeySection">
            <summary>
            Encapsulates the data necessary to generate an RsaSmallPublicKey
            </summary>
        </member>
        <member name="P:SixPack.Security.Cryptography.Configuration.RsaSmallPublicKeySection.Modulus">
            <summary>
            Modulus
            </summary>
        </member>
        <member name="P:SixPack.Security.Cryptography.Configuration.RsaSmallPublicKeySection.Exponent">
            <summary>
            Exponent
            </summary>
        </member>
        <member name="P:SixPack.Security.Cryptography.Configuration.RsaSmallPublicKeySection.Value">
            <summary>
            Gets or sets the RsaSmallKey value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:SixPack.Security.Cryptography.RsaSmallCodeParser">
            <summary>
            Parses an encrypted, translated code and transforms it in a BigInteger using the RsaSmall algorithm.
            </summary>
        </member>
        <member name="M:SixPack.Security.Cryptography.RsaSmallCodeParser.#ctor(System.Int32,SixPack.Security.Cryptography.RsaSmallPublicKey,SixPack.Text.IStringTranslator)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Security.Cryptography.RsaSmallCodeParser"/> class.
            </summary>
            <param name="codeLength">Length of the code.</param>
            <param name="rsaPublicKey">The RSA public key.</param>
            <param name="translator">The translator.</param>
        </member>
        <member name="M:SixPack.Security.Cryptography.RsaSmallCodeParser.#ctor(System.Int32,SixPack.Security.Cryptography.RsaSmallPublicKey,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Security.Cryptography.RsaSmallCodeParser"/> class.
            </summary>
            <param name="codeLength">Length of the code.</param>
            <param name="rsaPublicKey">The RSA public key.</param>
            <param name="initialAlphabet">The initial alphabet.</param>
            <param name="finalAlphabet">The final alphabet.</param>
        </member>
        <member name="M:SixPack.Security.Cryptography.RsaSmallCodeParser.Parse(System.String)">
            <summary>
            Parses the specified code.
            </summary>
            <param name="code">The code.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.RsaSmallCodeParser.TryParse(System.String,SixPack.Security.Cryptography.BigInteger@)">
            <summary>
            Tries to parse the code and returns true if successful. The parsed value is passed in result.
            </summary>
            <param name="code">The code.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="T:SixPack.Security.Cryptography.SecureTokenBuilder">
            <summary>
            Encodes and decodes tokens. The tokens are encrypted and / or authenticated.
            </summary>
        </member>
        <member name="M:SixPack.Security.Cryptography.SecureTokenBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Security.Cryptography.SecureTokenBuilder"/> class.
            </summary>
            <param name="secretKey">The secret key.</param>
        </member>
        <member name="M:SixPack.Security.Cryptography.SecureTokenBuilder.#ctor(System.String,SixPack.Security.Cryptography.TokenTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Security.Cryptography.SecureTokenBuilder"/> class.
            </summary>
            <param name="secretKey">The secret key.</param>
            <param name="types">The type of the token.</param>
        </member>
        <member name="M:SixPack.Security.Cryptography.SecureTokenBuilder.#ctor(System.String,SixPack.Security.Cryptography.TokenTypes,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Security.Cryptography.SecureTokenBuilder"/> class.
            </summary>
            <param name="secretKey">The secret key.</param>
            <param name="types">The type of the token.</param>
            <param name="hmacAlgorithmName">Name of the hmac algorithm.</param>
            <param name="encryptionAlgorithmName">Name of the encryption algorithm.</param>
        </member>
        <member name="M:SixPack.Security.Cryptography.SecureTokenBuilder.EncodeArray(System.Object[])">
            <summary>
            Makes a token with the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
            <remarks>
            This class supports serializing any object graph, but is optimized for those containing strings, arrays, and hash tables.
            It offers second order optimization for many of the .NET Framework primitive types.
            </remarks>
        </member>
        <member name="M:SixPack.Security.Cryptography.SecureTokenBuilder.DecodeArray(System.String)">
            <summary>
            Decodes the token.
            </summary>
            <param name="token">The token.</param>
            <returns>Returns the data of the token.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.SecureTokenBuilder.EncodeObject(System.Object)">
            <summary>
            Makes a token with the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
            <remarks>
            This class supports serializing any object graph, but is optimized for those containing strings, arrays, and hash tables.
            It offers second order optimization for many of the .NET Framework primitive types.
            </remarks>
        </member>
        <member name="M:SixPack.Security.Cryptography.SecureTokenBuilder.DecodeObject(System.String)">
            <summary>
            Decodes the token.
            </summary>
            <param name="token">The token.</param>
            <returns>Returns the data of the token.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.SecureTokenBuilder.EncodeToken(System.String)">
            <summary>
            Makes a token with the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.SecureTokenBuilder.DecodeToken(System.String)">
            <summary>
            Decodes the token.
            </summary>
            <param name="token">The token.</param>
            <returns>Returns the data of the token.</returns>
        </member>
        <member name="T:SixPack.Security.Cryptography.TokenTypes">
            <summary>
            Defines how a token is encoded.
            </summary>
        </member>
        <member name="F:SixPack.Security.Cryptography.TokenTypes.Hashed">
            <summary>
            Indicates that a MAC should be added to the token.
            </summary>
        </member>
        <member name="F:SixPack.Security.Cryptography.TokenTypes.Encrypted">
            <summary>
            Indicates that the token is encrypted.
            </summary>
        </member>
        <member name="F:SixPack.Security.Cryptography.TokenTypes.All">
            <summary>
            Indicates that the token is encrypted and that a MAC is added to it.
            </summary>
        </member>
        <member name="T:SixPack.Text.AsciiStringTranslator">
            <summary>
            Implementation of the <see cref="T:SixPack.Text.IStringTranslator"/> interface for ASCII-only strings.
            </summary>
        </member>
        <member name="T:SixPack.Text.IStringTranslator">
            <summary>
            Interface for a class implementing a translation operator a-la Perl tr/// operator.
            </summary>
        </member>
        <member name="M:SixPack.Text.IStringTranslator.Translate(System.String)">
            <summary>
            Translates the specified text.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="P:SixPack.Text.IStringTranslator.InitialAlphabet">
            <summary>
            Gets the initial alphabet.
            </summary>
            <value>The initial alphabet.</value>
        </member>
        <member name="P:SixPack.Text.IStringTranslator.FinalAlphabet">
            <summary>
            Gets the final alphabet.
            </summary>
            <value>The final alphabet.</value>
        </member>
        <member name="M:SixPack.Text.AsciiStringTranslator.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Text.AsciiStringTranslator"/> class.
            </summary>
            <param name="initialAlphabet">The initial alphabet.</param>
            <param name="finalAlphabet">The final alphabet.</param>
            <param name="caseInvariant">if set to <c>true</c> the translation will be case invariant.</param>
            <remarks>Both parameters must have the same length.</remarks>
        </member>
        <member name="M:SixPack.Text.AsciiStringTranslator.Translate(System.String)">
            <summary>
            Translates the specified text.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="P:SixPack.Text.AsciiStringTranslator.InitialAlphabet">
            <summary>
            Gets the initial alphabet.
            </summary>
            <value>The initial alphabet.</value>
        </member>
        <member name="P:SixPack.Text.AsciiStringTranslator.FinalAlphabet">
            <summary>
            Gets the final alphabet.
            </summary>
            <value>The final alphabet.</value>
        </member>
        <member name="P:SixPack.Text.AsciiStringTranslator.IsCaseInvariant">
            <summary>
            Gets a value indicating whether this instance is case invariant.
            </summary>
            <value>
            	<c>true</c> if this instance is case invariant; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SixPack.Text.RegularExpressionPatterns">
            <summary>
            Contains some general-purpose patterns that are usefull for validating input data.
            </summary>
        </member>
        <member name="F:SixPack.Text.RegularExpressionPatterns.HexString">
            <summary>
            Matches an hexadecimal string, composed of pairs of hexadecimal digits.
            </summary>
        </member>
        <member name="F:SixPack.Text.RegularExpressionPatterns.Base64String">
            <summary>
            Matches a base-64 string.
            </summary>
        </member>
        <member name="F:SixPack.Text.RegularExpressionPatterns.UrlTokenString">
            <summary>
            Matches a base-64 string, as encoded by <see cref="M:System.Web.HttpServerUtility.UrlTokenEncode(System.Byte[])"/>.
            </summary>
        </member>
        <member name="T:SixPack.Text.StringExtensions">
            <summary>
            Extension methods for strings.
            </summary>
        </member>
        <member name="M:SixPack.Text.StringExtensions.FormatWith(System.String,System.Func{System.String,System.Object})">
            <summary>
            Formats a string with named placeholders.
            Example:
              var name = "Jack";
              "Hello, {name}".FormatWith(n => GetColumnValue(n));
            </summary>
            <param name="format">Example: "Hello, {name}"</param>
            <param name="getArgument">Example: n => GetColumnValue(n)</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Text.StringExtensions.FormatWith(System.String,System.IFormatProvider,System.Func{System.String,System.Object})">
            <summary>
            Formats a string with named placeholders.
            Example:
              var name = "Jack";
              "Hello, {name}".FormatWith(n => GetColumnValue(n));
            </summary>
            <param name="format">Example: "Hello, {name}"</param>
            <param name="provider">The format provider.</param>
            <param name="getArgument">Example: n => GetColumnValue(n)</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Text.StringExtensions.FormatWith(System.String,System.Object)">
            <summary>
            Formats a string with named placeholders.
            Example:
              var name = "Jack";
              "Hello, {name}".FormatWith(new { name });
            </summary>
            <param name="format">Example: "Hello, {name}"</param>
            <param name="arguments">Example: new { name = "Jack" }</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Text.StringExtensions.FormatWith(System.String,System.IFormatProvider,System.Object)">
            <summary>
            Formats a string with named placeholders.
            Example:
              var name = "Jack";
              "Hello, {name}".FormatWith(new { name });
            </summary>
            <param name="format">Example: "Hello, {name}"</param>
            <param name="provider">The format provider.</param>
            <param name="arguments">Example: new { name = "Jack" }</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Text.StringExtensions.FormatWith``1(System.String,System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Formats a string with named placeholders.
            Example:
              "Hello, {name}".FormatWith(new Dictionary&lt;string, object&gt; { { "name", "Jack" } });
            </summary>
            <param name="format">Example: "Hello, {name}"</param>
            <param name="arguments">Example: new Dictionary&lt;string, object&gt; { { "name", "Jack" } }</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Text.StringExtensions.FormatWith``1(System.String,System.IFormatProvider,System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Formats a string with named placeholders.
            Example:
              var name = "Jack";
              "Hello, {name}".FormatWith(new Dictionary&lt;string, object&gt; { { "name", "Jack" } });
            </summary>
            <param name="format">Example: "Hello, {name}"</param>
            <param name="provider">The format provider.</param>
            <param name="arguments">Example: new Dictionary&lt;string, object&gt; { { "name", "Jack" } }</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Text.StringExtensions.FormatWith(System.String,SixPack.Text.IValueProvider)">
            <summary>
            Formats a string with named placeholders.
            Example:
              var name = "Jack";
              "Hello, {name}".FormatWith(new { name });
            </summary>
            <param name="format">Example: "Hello, {name}"</param>
            <param name="arguments">The named arguments.</param>
        </member>
        <member name="M:SixPack.Text.StringExtensions.FormatWith(System.String,System.IFormatProvider,SixPack.Text.IValueProvider)">
            <summary>
            Formats a string with named placeholders.
            Example:
              var name = "Jack";
              "Hello, {name}".FormatWith(new { name });
            </summary>
            <param name="format">Example: "Hello, {name}"</param>
            <param name="provider">The format provider.</param>
            <param name="arguments">The named arguments.</param>
        </member>
        <member name="M:SixPack.Text.StringExtensions.FormatArgs(System.String,System.Object[])">
            <summary>
            Invokes String.Format with the specified parameters.
            </summary>
        </member>
        <member name="M:SixPack.Text.StringExtensions.FormatArgs(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            Invokes String.Format with the specified parameters.
            </summary>
        </member>
        <member name="M:SixPack.Text.StringExtensions.DelimitWith``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Joins the specified items into a string separated by the specified separator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="separator">The separator.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Text.StringExtensions.DelimitWith``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Joins the specified items into a string separated by the specified separator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="separator">The separator.</param>
            <param name="format">The item format string.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Text.StringExtensions.DelimitWith``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String)">
            <summary>
            Joins the specified items into a string separated by the specified separator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="separator">The separator.</param>
            <param name="format">The item format string.</param>
            <param name="prefix">The prefix.</param>
            <param name="suffix">The suffix.</param>
            <returns></returns>
        </member>
        <member name="T:SixPack.Text.IValueProvider">
            <summary>
            Defines the interface of an object that provides values to fill placeholders.
            </summary>
        </member>
        <member name="P:SixPack.Text.IValueProvider.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="T:SixPack.Text.TextNormalizationType">
            <summary>
            
            </summary>
        </member>
        <member name="F:SixPack.Text.TextNormalizationType.Field">
            <summary>
            
            </summary>
        </member>
        <member name="F:SixPack.Text.TextNormalizationType.Property">
            <summary>
            
            </summary>
        </member>
        <member name="F:SixPack.Text.TextNormalizationType.Class">
            <summary>
            
            </summary>
        </member>
        <member name="F:SixPack.Text.TextNormalizationType.Method">
            <summary>
            
            </summary>
        </member>
        <member name="T:SixPack.Text.TextSanitationMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:SixPack.Text.TextSanitationMode.Alphanumeric">
            <summary>
            
            </summary>
        </member>
        <member name="T:SixPack.Text.TextSearchOptions">
            <summary>
            Specifies how to search text
            </summary>
        </member>
        <member name="F:SixPack.Text.TextSearchOptions.None">
            <summary>
            Case sensitive exact match
            </summary>
        </member>
        <member name="F:SixPack.Text.TextSearchOptions.Partial">
            <summary>
            Partial matching
            </summary>
        </member>
        <member name="F:SixPack.Text.TextSearchOptions.CaseInsensitive">
            <summary>
            Case insensitive matching
            </summary>
        </member>
        <member name="F:SixPack.Text.TextSearchOptions.Regex">
            <summary>
            Use the text as a regular expression
            </summary>
        </member>
        <member name="T:SixPack.Web.UI.ControlFinder">
            <summary>
            A class that perform searches in control trees
            </summary>
        </member>
        <member name="M:SixPack.Web.UI.ControlFinder.#ctor(System.Web.UI.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Web.UI.ControlFinder"/> class.
            </summary>
            <param name="rootControl">The root control.</param>
        </member>
        <member name="M:SixPack.Web.UI.ControlFinder.FindFirst(System.String)">
            <summary>
            Searches the control tree recursively and returns the first 
            case insensitive partial match of the expression 
            </summary>
            <param name="expression">
            The search expression <see cref="T:System.String"/>
            </param>
            <returns>
            A <see cref="T:System.Web.UI.Control"/> that matches the expression
            </returns>
        </member>
        <member name="M:SixPack.Web.UI.ControlFinder.FindFirst(System.String,SixPack.Text.TextSearchOptions)">
            <summary>
            Searches the control tree recursively and returns the first match 
            </summary>
            <param name="expression">
            The search expression <see cref="T:System.String"/>
            </param>
            <param name="searchOptions">
            The <see cref="T:SixPack.Text.TextSearchOptions"/>
            </param>
            <returns>
            A <see cref="T:System.Web.UI.Control"/> that matches the expression
            </returns>		
        </member>
        <member name="M:SixPack.Web.UI.ControlFinder.FindFirst(System.String,SixPack.Text.TextSearchOptions,System.Boolean)">
            <summary>
            Searches the control tree and returns the first match 
            </summary>
            <param name="expression">
            The search expression <see cref="T:System.String"/>
            </param>
            <param name="searchOptions">
            The <see cref="T:SixPack.Text.TextSearchOptions"/>
            </param>
            <param name="recursive">
            Search in all the subtree if true
            </param>
            <returns>
            A <see cref="T:System.Web.UI.Control"/> that matches the expression
            </returns>
        </member>
        <member name="M:SixPack.Web.UI.ControlFinder.Find(System.String)">
            <summary>
            Finds the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Web.UI.ControlFinder.Find(System.String,SixPack.Text.TextSearchOptions)">
            <summary>
            Finds the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="searchOptions">The search options.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Web.UI.ControlFinder.Find(System.String,SixPack.Text.TextSearchOptions,System.Boolean)">
            <summary>
            Finds the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="searchOptions">The search options.</param>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Web.UI.ControlFinder.FindInControl(System.Web.UI.Control,System.String)">
            <summary>
            Finds all controls matching the specified expression 
            using case insensitive partial matching
            in the specified control and its subtree. 
            </summary>
            <param name="rootControl">
            The root <see cref="T:System.Web.UI.Control"/>
            </param>
            <param name="expression">
            The expression
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SixPack.Web.UI.ControlFinder.FindInControl(System.Web.UI.Control,System.String,SixPack.Text.TextSearchOptions)">
            <summary>
            Finds all controls matching the specified expression 
            in the specified control and its subtree. 
            </summary>
            <param name="rootControl">
            The root <see cref="T:System.Web.UI.Control"/>
            </param>
            <param name="expression">
            The expression
            </param>
            <param name="searchOptions">
            The <see cref="T:SixPack.Text.TextSearchOptions"/>
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SixPack.Web.UI.ControlFinder.FindInControl(System.Web.UI.Control,System.String,SixPack.Text.TextSearchOptions,System.Boolean)">
            <summary>
            Finds all controls matching the specified expression 
            </summary>
            <param name="rootControl">
            The root <see cref="T:System.Web.UI.Control"/>
            </param>
            <param name="expression">
            The expression
            </param>
            <param name="searchOptions">
            The <see cref="T:SixPack.Text.TextSearchOptions"/>
            </param>
            <param name="recursive">
            Recurse subtree if true
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SixPack.Web.UI.ControlFinder.FindFirstInControl(System.Web.UI.Control,System.String)">
            <summary>
            Searches the control tree recursively and returns the first 
            case insensitive partial match of the expression 
            </summary>
            <param name="rootControl">
            The root <see cref="T:System.Web.UI.Control"/>
            </param>
            <param name="expression">
            The search expression <see cref="T:System.String"/>
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SixPack.Web.UI.ControlFinder.FindFirstInControl(System.Web.UI.Control,System.String,SixPack.Text.TextSearchOptions)">
            <summary>
            Searches the control tree recursively and returns the first match 
            </summary>
            <param name="rootControl">
            The root <see cref="T:System.Web.UI.Control"/>
            </param>
            <param name="expression">
            The search expression <see cref="T:System.String"/>
            </param>
            <param name="searchOptions">
            The <see cref="T:SixPack.Text.TextSearchOptions"/>
            </param>
            <returns>
            </returns>		
        </member>
        <member name="M:SixPack.Web.UI.ControlFinder.FindFirstInControl(System.Web.UI.Control,System.String,SixPack.Text.TextSearchOptions,System.Boolean)">
            <summary>
            Searches the control tree and returns the first match 
            </summary>
            <param name="rootControl">
            The root <see cref="T:System.Web.UI.Control"/>
            </param>
            <param name="expression">
            The search expression <see cref="T:System.String"/>
            </param>
            <param name="searchOptions">
            The <see cref="T:SixPack.Text.TextSearchOptions"/>
            </param>
            <param name="recursive">
            Search in all the subtree if true
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:SixPack.Web.UI.ControlSieve">
            <summary>
            A delegate implementing a filter for controls
            </summary>
        </member>
        <member name="T:SixPack.Xml.Serializers.SimpleSerializer">
            <summary>
            Serialize instances to XML in a simple way.
            </summary>
        </member>
        <member name="M:SixPack.Xml.Serializers.SimpleSerializer.Serialize(System.IO.TextWriter,System.Object,System.String)">
            <summary>
            Serialize an instance to a TextWriter stream
            </summary>
            <param name="stream">The output stream</param>
            <param name="target">The instance to be serialized</param>
            <param name="name">The name of the top element of the XML generated</param>
        </member>
        <member name="T:SixPack.Xml.Xsl.XslTransformer">
            <summary>
            Encapsulates and extends an <see cref="T:System.Xml.Xsl.XslCompiledTransform"/>.
            </summary>
        </member>
        <member name="M:SixPack.Xml.Xsl.XslTransformer.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:SixPack.Xml.Xsl.XslTransformer"/> class.
            </summary>
        </member>
        <member name="M:SixPack.Xml.Xsl.XslTransformer.#ctor(System.Xml.Xsl.XslCompiledTransform)">
            <summary>
            Creates a new instance of the <see cref="T:SixPack.Xml.Xsl.XslTransformer"/> class.
            </summary>
            <param name="transform">
            A <see cref="T:System.Xml.Xsl.XslCompiledTransform"/> which will be used as a base for the transformation.
            </param>
            <exception cref="T:System.ArgumentNullException">The transform parameter is null.</exception>
        </member>
        <member name="M:SixPack.Xml.Xsl.XslTransformer.FromString(System.String)">
            <summary>
            Creates an XSLT transform from a string.
            </summary>
            <param name="xslt">
            A <see cref="T:System.String"/> containing the XSLT transformation.
            </param>
            <returns>
            Returns the current instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">The "xsltAsString" parameter is null or empty.</exception>
        </member>
        <member name="M:SixPack.Xml.Xsl.XslTransformer.FromResource(System.String,System.Reflection.Assembly)">
            <summary>
            Creates an XSLT transform from a resource.
            </summary>
            <param name="resourceName">
            The resource name from which to load the XSLT.
            </param>
            <param name="assembly">
            The <see cref="T:System.Reflection.Assembly"/> containing the resource to be loaded.
            </param>
            <returns>
            Returns the current instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">Either resourceName or assembly is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">The resource was not found in the specified assembly.</exception>
        </member>
        <member name="M:SixPack.Xml.Xsl.XslTransformer.FromResource(System.String)">
            <summary>
            Creates and XSLT transform from a resource
            </summary>
            <param name="resourceName">
            The resource name from which to load the XSLT.
            </param>
            <returns>
            Returns the current instance.
            </returns>
            <remarks>The resource is loaded form the calling assembly.</remarks>
            <exception cref="T:System.ArgumentNullException">Either resourceName or assembly is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">The resource was not found in the specified assembly.</exception>
        </member>
        <member name="M:SixPack.Xml.Xsl.XslTransformer.FromFile(System.String)">
            <summary>
            Creates and XSLT transform from a file
            </summary>
            <param name="fileName">
            The path of the file from which to load the XSLT.
            </param>
            <returns>
            Returns the current instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">file name is null or empty.</exception>
        </member>
        <member name="P:SixPack.Xml.Xsl.XslTransformer.Xslt">
            <value>
            Gets the current <see cref="T:System.Xml.Xsl.XslCompiledTransform"/> generated by the class.
            </value>
        </member>
        <member name="T:SixPack.Net.Mail.MailSemanticValidationMode">
            <summary>
            Specifies the semantic validation mode for email
            </summary>
        </member>
        <member name="F:SixPack.Net.Mail.MailSemanticValidationMode.None">
            <summary>
            No validation is performed (default)
            </summary>
        </member>
        <member name="F:SixPack.Net.Mail.MailSemanticValidationMode.DnsLookup">
            <summary>
            Looks up the DNS records of the email host
            </summary>
        </member>
        <member name="F:SixPack.Net.Mail.MailSemanticValidationMode.ServerLookup">
            <summary>
            Tries to contact the mail server.
            </summary>
        </member>
        <member name="F:SixPack.Net.Mail.MailSemanticValidationMode.UserLookup">
            <summary>
            Tries to lookup the user on the mail server. 
            Very strict but with false errors.
            </summary>
        </member>
        <member name="T:SixPack.Net.Mail.MailSyntaxValidationMode">
            <summary>
            Specifies the syntax validation mode for email
            </summary>
        </member>
        <member name="F:SixPack.Net.Mail.MailSyntaxValidationMode.None">
            <summary>
            No validation is performed
            </summary>
        </member>
        <member name="F:SixPack.Net.Mail.MailSyntaxValidationMode.Simple">
            <summary>
            Simple but efficient (default)
            </summary>
        </member>
        <member name="F:SixPack.Net.Mail.MailSyntaxValidationMode.Rfc2822">
            <summary>
            RFC compliant
            </summary>
        </member>
        <member name="T:SixPack.Net.NetworkInformation.IPSemantics">
            <summary>
            Contains methods to validate the semantics of IPv4 addresses
            </summary>
        </member>
        <member name="M:SixPack.Net.NetworkInformation.IPSemantics.IsValidIP(System.Net.IPAddress)">
            <summary>
            Determines whether the specified IP is a valid IP.
            </summary>
            <param name="ip">The IP.</param>
            <returns>
            	<c>true</c> if the specified IP is a valid IP; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SixPack.Net.NetworkInformation.IPSemantics.IsValidIP(System.Net.IPAddress,SixPack.Net.NetworkInformation.IPRanges)">
            <summary>
            Determines whether the specified IP is a valid IP.
            </summary>
            <param name="ip">The IP.</param>
            <param name="invalidRange">The invalid range.</param>
            <returns>
            	<c>true</c> if the specified IP is a valid IP; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SixPack.Net.NetworkInformation.IPSemantics.GetIPRange(System.Net.IPAddress)">
            <summary>
            Gets the IP range to which an IP address belongs.
            </summary>
            <param name="ip">The IP.</param>
            <returns></returns>
        </member>
        <member name="T:SixPack.Net.NetworkInformation.IPRanges">
            <summary>
            Flags that indicate well-known IP address ranges (default only HTTP-valid Ips)
            See http://en.wikipedia.org/wiki/IPv4#Addressing
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.None">
            <summary>
            No addresses 
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.Current">
            <summary>
            0.0.0.0/8 - Current network (only valid as source address) - RFC 1700
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.Private10">
            <summary>
            10.0.0.0/8 - Private network - RFC 1918
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.PublicData">
            <summary>
            14.0.0.0/8 - Public data networks - RFC 1700
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.Loopback">
            <summary>
            127.0.0.0/8 - Loopback - RFC 3330
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.Reserved128">
            <summary>
            128.0.0.0/16 - Reserved (IANA) - RFC 3330
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.LinkLocal">
            <summary>
            169.254.0.0/16 - Link-Local - RFC 3927
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.Private172">
            <summary>
            172.16.0.0/12 - Private network - RFC 1918
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.Reserved191">
            <summary>
            191.255.0.0/16 - Reserved (IANA) - RFC 3330
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.Reserved192">
            <summary>
            192.0.0.0/24 - Reserved (IANA) - RFC 3330
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.Documentation">
            <summary>
            192.0.2.0/24 - Documentation and example code - RFC 3330
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.IPv6ToIPv4">
            <summary>
            192.88.99.0/24 - IPv6 to IPv4 relay - RFC 3068
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.Private192">
            <summary>
            192.168.0.0/16 - Private network - RFC 1918
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.BenchmarkTest">
            <summary>
            198.18.0.0/15 - Network benchmark tests - RFC 2544
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.Reserved223">
            <summary>
            223.255.255.0/24 - Reserved (IANA) - RFC 3330
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.Multicast">
            <summary>
            224.0.0.0/4 - Multicasts (former Class D network) - RFC 3171
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.Reserved240">
            <summary>
            240.0.0.0/4 - Reserved (former Class E network) - RFC 1700
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.Broadcast">
            <summary>
            255.255.255.255 - Broadcast
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.Private">
            <summary>
            Private Network IPs
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.Reserved">
            <summary>
            Reserved IPs
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.Cast">
            <summary>
            Multicast and Broadcast IPs
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.Internal">
            <summary>
            IP-internal addresses
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.HttpInvalid">
            <summary>
            Addresses that are invalid for normal HTTP operation (default)
            </summary>
        </member>
        <member name="F:SixPack.Net.NetworkInformation.IPRanges.NotPublic">
            <summary>
            All non public addresses
            </summary>
        </member>
        <member name="T:SixPack.Net.Sockets.SmtpClient">
            <summary>
            This class provides a simple SMTP client, based on RFC 821
            See: http://www.ietf.org/rfc/rfc0821.txt
            </summary>
        </member>
        <member name="M:SixPack.Net.Sockets.SmtpClient.#ctor(System.Net.IPAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Net.Sockets.SmtpClient"/> class.
            </summary>
            <param name="smtpServer">The SMTP server.</param>
        </member>
        <member name="M:SixPack.Net.Sockets.SmtpClient.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Net.Sockets.SmtpClient"/> class.
            </summary>
            <param name="server">The server.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:SixPack.Net.Sockets.SmtpClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SixPack.Net.Sockets.SmtpClient.Connect">
            <summary>
            Connects this instance to the SMTP server.
            </summary>
        </member>
        <member name="M:SixPack.Net.Sockets.SmtpClient.Hello">
            <summary>
            HELLO (HELO)
            This command is used to identify the sender-SMTP to the
            receiver-SMTP.  The argument field contains the host name of
            the sender-SMTP.
            The receiver-SMTP identifies itself to the sender-SMTP in
            the connection greeting reply, and in the response to this
            command.
            This command and an OK reply to it confirm that both the
            sender-SMTP and the receiver-SMTP are in the initial state,
            that is, there is no transaction in progress and all state
            tables and buffers are cleared.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Net.Sockets.SmtpClient.Mail(System.String)">
            <summary>
            MAIL (MAIL)
            This command is used to initiate a mail transaction in which
            the mail data is delivered to one or more mailboxes.  The
            argument field contains a reverse-path.
            The reverse-path consists of an optional list of hosts and
            the sender mailbox.  When the list of hosts is present, it
            is a "reverse" source route and indicates that the mail was
            relayed through each host on the list (the first host in the
            list was the most recent relay).  This list is used as a
            source route to return non-delivery notices to the sender.
            As each relay host adds itself to the beginning of the list,
            it must use its name as known in the IPCE to which it is
            relaying the mail rather than the IPCE from which the mail
            came (if they are different).  In some types of error
            reporting messages (for example, undeliverable mail
            notifications) the reverse-path may be null (see Example 7).
            This command clears the reverse-path buffer, the
            forward-path buffer, and the mail data buffer; and inserts
            the reverse-path information from this command into the
            reverse-path buffer.
            </summary>
            <param name="from">From parameter.</param>
        </member>
        <member name="M:SixPack.Net.Sockets.SmtpClient.Recipient(System.String)">
            <summary>
            RECIPIENT (RCPT)
            
            This command is used to identify an individual recipient of
            the mail data; multiple recipients are specified by multiple
            use of this command.
            
            The forward-path consists of an optional list of hosts and a
            required destination mailbox.  When the list of hosts is
            present, it is a source route and indicates that the mail
            must be relayed to the next host on the list.  If the
            receiver-SMTP does not implement the relay function it may
            user the same reply it would for an unknown local user
            (550).
            
            When mail is relayed, the relay host must remove itself from
            the beginning forward-path and put itself at the beginning
            of the reverse-path.  When mail reaches its ultimate
            destination (the forward-path contains only a destination
            mailbox), the receiver-SMTP inserts it into the destination
            mailbox in accordance with its host mail conventions.
            </summary>
            <param name="to">To parameter.</param>
        </member>
        <member name="M:SixPack.Net.Sockets.SmtpClient.Data(System.String)">
            <summary>
            DATA (DATA)
            The receiver treats the lines following the command as mail
            data from the sender.  This command causes the mail data
            from this command to be appended to the mail data buffer.
            The mail data may contain any of the 128 ASCII character
            codes.
            The mail data is terminated by a line containing only a
            period, that is the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;" (see
            Section 4.5.2 on Transparency).  This is the end of mail
            data indication.
            The end of mail data indication requires that the receiver
            must now process the stored mail transaction information.
            This processing consumes the information in the reverse-path
            buffer, the forward-path buffer, and the mail data buffer,
            and on the completion of this command these buffers are
            cleared.  If the processing is successful the receiver must
            send an OK reply.  If the processing fails completely the
            receiver must send a failure reply.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Net.Sockets.SmtpClient.Send(System.String)">
            <summary>
            SEND (SEND)
            
            This command is used to initiate a mail transaction in which
            the mail data is delivered to one or more terminals.  The
            argument field contains a reverse-path.  This command is
            successful if the message is delivered to a terminal.
            
            The reverse-path consists of an optional list of hosts and
            the sender mailbox.  When the list of hosts is present, it
            is a "reverse" source route and indicates that the mail was
            relayed through each host on the list (the first host in the
            list was the most recent relay).  This list is used as a
            source route to return non-delivery notices to the sender.
            As each relay host adds itself to the beginning of the list,
            it must use its name as known in the IPCE to which it is
            relaying the mail rather than the IPCE from which the mail
            came (if they are different).
            
            This command clears the reverse-path buffer, the
            forward-path buffer, and the mail data buffer; and inserts
            the reverse-path information from this command into the
            reverse-path buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Net.Sockets.SmtpClient.SendOrMail(System.String)">
            <summary>
            SEND OR MAIL (SOML)
            
            This command is used to initiate a mail transaction in which
            the mail data is delivered to one or more terminals or
            mailboxes. For each recipient the mail data is delivered to
            the recipient's terminal if the recipient is active on the
            host (and accepting terminal messages), otherwise to the
            recipient's mailbox.  The argument field contains a
            reverse-path.  This command is successful if the message is
            delivered to a terminal or the mailbox.
            
            The reverse-path consists of an optional list of hosts and
            the sender mailbox.  When the list of hosts is present, it
            is a "reverse" source route and indicates that the mail was
            relayed through each host on the list (the first host in the
            list was the most recent relay).  This list is used as a
            source route to return non-delivery notices to the sender.
            As each relay host adds itself to the beginning of the list,
            it must use its name as known in the IPCE to which it is
            relaying the mail rather than the IPCE from which the mail
            came (if they are different).
            
            This command clears the reverse-path buffer, the
            forward-path buffer, and the mail data buffer; and inserts
            the reverse-path information from this command into the
            reverse-path buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Net.Sockets.SmtpClient.SendAndMail(System.String)">
            <summary>
            SEND AND MAIL (SAML)
            
            This command is used to initiate a mail transaction in which
            the mail data is delivered to one or more terminals and
            mailboxes. For each recipient the mail data is delivered to
            the recipient's terminal if the recipient is active on the
            host (and accepting terminal messages), and for all
            recipients to the recipient's mailbox.  The argument field
            contains a reverse-path.  This command is successful if the
            message is delivered to the mailbox.
            
            The reverse-path consists of an optional list of hosts and
            the sender mailbox.  When the list of hosts is present, it
            is a "reverse" source route and indicates that the mail was
            relayed through each host on the list (the first host in the
            list was the most recent relay).  This list is used as a
            source route to return non-delivery notices to the sender.
            As each relay host adds itself to the beginning of the list,
            it must use its name as known in the IPCE to which it is
            relaying the mail rather than the IPCE from which the mail
            came (if they are different).
            
            This command clears the reverse-path buffer, the
            forward-path buffer, and the mail data buffer; and inserts
            the reverse-path information from this command into the
            reverse-path buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Net.Sockets.SmtpClient.Reset">
            <summary>
            RESET (RSET)
            
            This command specifies that the current mail transaction is
            to be aborted.  Any stored sender, recipients, and mail data
            must be discarded, and all buffers and state tables cleared.
            The receiver must send an OK reply.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Net.Sockets.SmtpClient.Verify(System.String)">
            <summary>
            VERIFY (VRFY)
            This command asks the receiver to confirm that the argument
            identifies a user.  If it is a user name, the full name of
            the user (if known) and the fully specified mailbox are
            returned.
            This command has no effect on any of the reverse-path
            buffer, the forward-path buffer, or the mail data buffer.
            </summary>
            <param name="argument">The argument.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Net.Sockets.SmtpClient.Expand(System.String)">
            <summary>
            EXPAND (EXPN)
            This command asks the receiver to confirm that the argument
            identifies a mailing list, and if so, to return the
            membership of that list.  The full name of the users (if
            known) and the fully specified mailboxes are returned in a
            multiline reply.
            This command has no effect on any of the reverse-path
            buffer, the forward-path buffer, or the mail data buffer.
            </summary>
            <param name="argument">The argument.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Net.Sockets.SmtpClient.Help(System.String)">
            <summary>
            HELP (HELP)
            This command causes the receiver to send helpful information
            to the sender of the HELP command.  The command may take an
            argument (e.g., any command name) and return more specific
            information as a response.
            This command has no effect on any of the reverse-path
            buffer, the forward-path buffer, or the mail data buffer.
            </summary>
            <param name="argument">The argument.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Net.Sockets.SmtpClient.Noop">
            <summary>
            NOOP (NOOP)
            
            This command does not affect any parameters or previously
            entered commands.  It specifies no action other than that
            the receiver send an OK reply.
            
            This command has no effect on any of the reverse-path
            buffer, the forward-path buffer, or the mail data buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Net.Sockets.SmtpClient.Quit">
            <summary>
            QUIT (QUIT)
            
            This command specifies that the receiver must send an OK
            reply, and then close the transmission channel.
            
            The receiver should not close the transmission channel until
            it receives and replies to a QUIT command (even if there was
            an error).  The sender should not close the transmission
            channel until it send a QUIT command and receives the reply
            (even if there was an error response to a previous command).
            If the connection is closed prematurely the receiver should
            act as if a RSET command had been received (canceling any
            pending transaction, but not undoing any previously
            completed transaction), the sender should act as if the
            command or transaction in progress had received a temporary
            error (4xx).
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Net.Sockets.SmtpClient.Turn">
            <summary>
            TURN (TURN)
            
            This command specifies that the receiver must either (1)
            send an OK reply and then take on the role of the
            sender-SMTP, or (2) send a refusal reply and retain the role
            of the receiver-SMTP.
            
            If program-A is currently the sender-SMTP and it sends the
            TURN command and receives an OK reply (250) then program-A
            becomes the receiver-SMTP.  Program-A is then in the initial
            state as if the transmission channel just opened, and it
            then sends the 220 service ready greeting.
            
            If program-B is currently the receiver-SMTP and it receives
            the TURN command and sends an OK reply (250) then program-B
            becomes the sender-SMTP.  Program-B is then in the initial
            state as if the transmission channel just opened, and it
            then expects to receive the 220 service ready greeting.
            
            To refuse to change roles the receiver sends the 502 reply.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Net.Sockets.SmtpClient.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:SixPack.Net.Sockets.SmtpClient.Server">
            <summary>
            Gets or sets the server.
            </summary>
            <value>The server.</value>
        </member>
        <member name="P:SixPack.Net.Sockets.SmtpClient.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="T:SixPack.Net.Sockets.SmtpResponse">
            <summary>
            Encapsulates a SMTP response
            </summary>
        </member>
        <member name="P:SixPack.Net.Sockets.SmtpResponse.ResponseCode">
            <summary>
            Gets the response code.
            </summary>
            <value>The response code.</value>
        </member>
        <member name="P:SixPack.Net.Sockets.SmtpResponse.ResponseText">
            <summary>
            Gets the response text as provided from the SMTP server.
            </summary>
            <value>The response text.</value>
        </member>
        <member name="T:SixPack.Net.Sockets.SmtpResponseCode">
            <summary>
            Encapsulates SMTP Response Codes
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.None">
            <summary>
            No result code
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.SystemStatus">
            <summary>
             System status, or system help reply
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.HelpMessage">
            <summary>
             Help message
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.ServiceReady">
            <summary>
             &lt;domain&gt; Service ready
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.ServiceClosing">
            <summary>
             &lt;domain&gt; Service closing transmission channel
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.Completed">
            <summary>
             Requested mail action okay, completed
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.UserNotLocalForward">
            <summary>
             User not local; will forward to &lt;forward-path&gt;
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.CannotVerify">
            <summary>
             Cannot VRFY user; try RCPT to attempt delivery (or try finger)
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.StartMailInput">
            <summary>
             Start mail input; end with &lt;CRLF&gt;.&lt;CRLF&gt;
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.ServiceNotAvailable">
            <summary>
             &lt;domain&gt; Service not available, closing transmission channel
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.MailboxUnavailableMail">
            <summary>
             Requested mail action not taken: mailbox unavailable
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.ErrorInProcessing">
            <summary>
             Requested action aborted: local error in processing
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.InsufficientSystemStorage">
            <summary>
             Requested action not taken: insufficient system storage
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.CommandUnrecognized">
            <summary>
             Syntax error, command unrecognized
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.SyntaxError">
            <summary>
             Syntax error in parameters or arguments
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.NotImplemented">
            <summary>
             Command not implemented
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.BadSequence">
            <summary>
             Bad sequence of commands
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.ParameterNotImplemented">
            <summary>
             Command parameter not implemented
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.MailboxUnavailable">
            <summary>
             Requested action not taken: mailbox unavailable
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.UserNotLocalTry">
            <summary>
             User not local; please try &lt;forward-path&gt;
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.ExceededStorageAllocation">
            <summary>
             Requested mail action aborted: exceeded storage allocation
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.MailboxNameNotAllowed">
            <summary>
             Requested action not taken: mailbox name not allowed
            </summary>
        </member>
        <member name="F:SixPack.Net.Sockets.SmtpResponseCode.TransactionFailed">
            <summary>
             Transaction failed
            </summary>
        </member>
        <member name="T:SixPack.Net.UriFormat">
            <summary>
            Validates an URI
            </summary>
        </member>
        <member name="F:SixPack.Net.UriFormat.rfc2396UriPattern">
            <summary>
            Regex expression to validate a URI according to RFC 2396
            </summary>
        </member>
        <member name="F:SixPack.Net.UriFormat.simpleUriPattern">
            <summary>
            Regex expression to validate a URI in a simple, but efficient manner
            </summary>
        </member>
        <member name="M:SixPack.Net.UriFormat.IsValid(System.String,SixPack.Net.UriSyntaxValidationMode)">
            <summary>
            Determines whether the specified URI is valid.
            </summary>
            <param name="uri">The URI.</param>
            <param name="mode">The mode.</param>
            <returns>
            	<c>true</c> if the specified URI is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SixPack.Net.UriFormat.IsValid(System.String)">
            <summary>
            Determines whether the specified URI is valid.
            </summary>
            <param name="uri">The URI.</param>
            <returns>
            	<c>true</c> if the specified URI is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SixPack.Net.UriSyntaxValidationMode">
            <summary>
            Specifies the syntax validation mode for URIs
            </summary>
        </member>
        <member name="F:SixPack.Net.UriSyntaxValidationMode.Simple">
            <summary>
            Simple but efficient (default)
            </summary>
        </member>
        <member name="F:SixPack.Net.UriSyntaxValidationMode.Rfc2396">
            <summary>
            RFC compliant
            </summary>
        </member>
        <member name="T:SixPack.ComponentModel.CachedMethodAttribute">
            <summary>
            Specifies that the result of the method will be cached for a set amount of time.
            </summary>
            <remarks>
            This attribute does not work on static methods.
            The <see cref="T:SixPack.ComponentModel.CachedAttribute"/> attribute must be applied to the class that contains this method.
            </remarks>
        </member>
        <member name="M:SixPack.ComponentModel.CachedMethodAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.ComponentModel.CachedMethodAttribute"/> class.
            </summary>
            <param name="cacheTime">The cache time in seconds.</param>
        </member>
        <member name="P:SixPack.ComponentModel.CachedMethodAttribute.CacheTime">
            <summary>
            Gets the cache time in seconds.
            </summary>
            <value>The cache time in seconds.</value>
        </member>
        <member name="T:SixPack.ComponentModel.CachedContextProperty">
            <summary>
            Experimental
            </summary>
        </member>
        <member name="M:SixPack.ComponentModel.CachedContextProperty.Freeze(System.Runtime.Remoting.Contexts.Context)">
            <summary>
            Called when the context is frozen.
            </summary>
            <param name="newContext">The context to freeze.</param>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure"/></PermissionSet>
        </member>
        <member name="M:SixPack.ComponentModel.CachedContextProperty.IsNewContextOK(System.Runtime.Remoting.Contexts.Context)">
            <summary>
            Returns a Boolean value indicating whether the context property is compatible with the new context.
            </summary>
            <param name="newCtx">The new context in which the <see cref="T:System.Runtime.Remoting.Contexts.ContextProperty"></see> has been created.</param>
            <returns>
            true if the context property can coexist with the other context properties in the given context; otherwise, false.
            </returns>
        </member>
        <member name="M:SixPack.ComponentModel.CachedContextProperty.GetServerContextSink(System.Runtime.Remoting.Messaging.IMessageSink)">
            <summary>
            Takes the first sink in the chain of sinks composed so far, and then chains its message sink in front of the chain already formed.
            </summary>
            <param name="nextSink">The chain of sinks composed so far.</param>
            <returns>The composite sink chain.</returns>
        </member>
        <member name="P:SixPack.ComponentModel.CachedContextProperty.Name">
            <summary>
            Gets the name of the property under which it will be added to the context.
            </summary>
            <value></value>
            <returns>The name of the property.</returns>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure"/></PermissionSet>
        </member>
        <member name="T:SixPack.ComponentModel.CachedSink">
            <summary>
            Experimental
            </summary>
        </member>
        <member name="M:SixPack.ComponentModel.CachedSink.#ctor(System.Runtime.Remoting.Messaging.IMessageSink)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.ComponentModel.CachedSink"/> class.
            </summary>
            <param name="nextSink">The next sink.</param>
        </member>
        <member name="M:SixPack.ComponentModel.CachedSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Synchronously processes the given message.
            </summary>
            <param name="msg">The message to process.</param>
            <returns>
            A reply message in response to the request.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller makes the call through a reference to the interface and does not have infrastructure permission. </exception>
        </member>
        <member name="M:SixPack.ComponentModel.CachedSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
            <summary>
            Asynchronously processes the given message.
            </summary>
            <param name="msg">The message to process.</param>
            <param name="replySink">The reply sink for the reply message.</param>
            <returns>
            Returns an <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl"></see> interface that provides a way to control asynchronous messages after they have been dispatched.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller makes the call through a reference to the interface and does not have infrastructure permission. </exception>
        </member>
        <member name="P:SixPack.ComponentModel.CachedSink.NextSink">
            <summary>
            Gets the next message sink in the sink chain.
            </summary>
            <value></value>
            <returns>The next message sink in the sink chain.</returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller makes the call through a reference to the interface and does not have infrastructure permission. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure"/></PermissionSet>
        </member>
        <member name="T:SixPack.ComponentModel.CachedAttribute">
            <summary>
            Enables caching on the current class.
            </summary>
            <remarks>
            The methods that are to be cached should be marked with the <see cref="T:SixPack.ComponentModel.CachedMethodAttribute"/> attribute.
            The current class must inherit from <see cref="T:System.ContextBoundObject"/>.
            </remarks>
        </member>
        <member name="M:SixPack.ComponentModel.CachedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.ComponentModel.CachedAttribute"/> class.
            </summary>
        </member>
        <member name="M:SixPack.ComponentModel.CachedAttribute.GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage)">
            <summary>
            Gets the properties for new context.
            </summary>
            <param name="ctorMsg">The ctor.</param>
        </member>
        <member name="M:SixPack.ComponentModel.CachedAttribute.IsContextOK(System.Runtime.Remoting.Contexts.Context,System.Runtime.Remoting.Activation.IConstructionCallMessage)">
            <summary>
            Returns a Boolean value indicating whether the context parameter meets the context attribute's requirements.
            </summary>
            <param name="ctx">The context in which to check.</param>
            <param name="ctorMsg">The <see cref="T:System.Runtime.Remoting.Activation.IConstructionCallMessage"></see> to which to add the context property.</param>
            <returns>
            true if the passed in context is okay; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">Either ctx or ctorMsg is null. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure"/></PermissionSet>
        </member>
        <member name="T:SixPack.Security.ActionLimiter">
            <summary>
            Helper class to prevent a Web service method from being called too often
            </summary>
        </member>
        <member name="M:SixPack.Security.ActionLimiter.LimitActionsPerUser(System.String,System.TimeSpan)">
            <summary>
            Notifies that an action is starting. If not enough time has passed since the current user performed that action, a <see cref="T:System.Security.SecurityException"/> is thrown.
            </summary>
            <param name="action">
            Name of the action that is being performed. In case of a Web method, this is usually the namespace of the web service plus the name of the method.
            </param>
            <param name="minTimeBetweenCalls">The minimum time between calls.</param>
        </member>
        <member name="M:SixPack.Security.ActionLimiter.LimitActionsPerUser(System.String)">
            <summary>
            Notifies that an action is starting. If not enough time has passed since the current user performed that action, a <see cref="T:System.Security.SecurityException"/> is thrown.
            </summary>
            <param name="action">
            Name of the action that is being performed. In case of a Web method, this is usually the namespace of the web service plus the name of the method.
            </param>
            <remarks>
            Uses the default time between calls (1 second).
            </remarks>
        </member>
        <member name="M:SixPack.Security.ActionLimiter.LimitActionsPerUser(System.TimeSpan)">
            <summary>
            Notifies that an action is starting. If not enough time has passed since the current user performed that action, a <see cref="T:System.Security.SecurityException"/> is thrown.
            </summary>
            <param name="minTimeBetweenCalls">The minimum time between calls.</param>
            <remarks>
            Uses the name of the calling method as the action name.
            </remarks>
        </member>
        <member name="M:SixPack.Security.ActionLimiter.LimitActionsPerUser">
            <summary>
            Notifies that an action is starting. If not enough time has passed since the current user performed that action, a <see cref="T:System.Security.SecurityException"/> is thrown.
            </summary>
            <remarks>
            Uses the default time between calls (1 second) and the name of the calling method as the action name.
            </remarks>
        </member>
        <member name="T:SixPack.Security.ActionLimiter.CallTimings">
            <summary>
            Keeps track of the last call time of each method
            </summary>
        </member>
        <member name="M:SixPack.Security.ActionLimiter.CallTimings.LimitActionsPerUser(System.String,System.TimeSpan)">
            <summary>
            Throws a <see cref="T:System.Security.SecurityException"/> if the specified action is being performed too often.
            </summary>
            <param name="action">
            Name of the action that is being performed.
            </param>
            <param name="minTimeBetweenCalls"></param>
        </member>
        <member name="T:SixPack.Security.Cryptography.BigInteger">
            <summary>
            BigInteger Class
            Version 1.03
            Copyright (c) 2002 Chew Keong TAN
            </summary>
        </member>
        <member name="F:SixPack.Security.Cryptography.BigInteger.primesBelow2000">
            <summary>
            Primes smaller than 2000 to test the generated prime number
            </summary>
        </member>
        <member name="F:SixPack.Security.Cryptography.BigInteger.dataLength">
            <summary>
            Number of actual chars used
            </summary>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Security.Cryptography.BigInteger"/> class.
            </summary>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Security.Cryptography.BigInteger"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Security.Cryptography.BigInteger"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.#ctor(SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Security.Cryptography.BigInteger"/> class.
            </summary>
            <param name="bi">The bi.</param>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Security.Cryptography.BigInteger"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="charSet">The character set used to represent the value.</param>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Security.Cryptography.BigInteger"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="radix">The radix.</param>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Security.Cryptography.BigInteger"/> class.
            </summary>
            <param name="inData">The in data.</param>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Security.Cryptography.BigInteger"/> class.
            </summary>
            <param name="inData">The in data.</param>
            <param name="inLen">The in len.</param>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.#ctor(System.UInt32[])">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Security.Cryptography.BigInteger"/> class.
            </summary>
            <param name="inData">The in data.</param>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_Implicit(System.Int64)~SixPack.Security.Cryptography.BigInteger">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int64"/> to <see cref="T:SixPack.Security.Cryptography.BigInteger"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_Implicit(System.UInt64)~SixPack.Security.Cryptography.BigInteger">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:SixPack.Security.Cryptography.BigInteger"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_Implicit(System.Int32)~SixPack.Security.Cryptography.BigInteger">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:SixPack.Security.Cryptography.BigInteger"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_Implicit(System.UInt32)~SixPack.Security.Cryptography.BigInteger">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:SixPack.Security.Cryptography.BigInteger"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.Add(SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Adds the specified operands.
            </summary>
            <param name="operand">The operand.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_Addition(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="operand">The first operand.</param>
            <param name="secondOperand">The second operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.Increment">
            <summary>
            Increments this.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_Increment(SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Implements the operator ++.
            </summary>
            <param name="operand">The operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.Subtract(SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Subtracts the specified operand from this.
            </summary>
            <param name="operand">The operand.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_Subtraction(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="operand">The first operand.</param>
            <param name="secondOperand">The second operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.Decrement">
            <summary>
            Decrements this.
            </summary>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_Decrement(SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Implements the operator --.
            </summary>
            <param name="operand">The operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.Multiply(SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Multiplies this instance with the specified operand.
            </summary>
            <param name="operand">The operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_Multiply(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="operand">The first operand.</param>
            <param name="secondOperand">The second operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.LeftShift(System.Int32)">
            <summary>
            Left shifts this by the specified value
            </summary>
            <param name="shiftValue">The shift value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_LeftShift(SixPack.Security.Cryptography.BigInteger,System.Int32)">
            <summary>
            Implements the operator &lt;&lt;.
            </summary>
            <param name="operand">The first operand.</param>
            <param name="shiftValue">The shift value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.RightShift(System.Int32)">
            <summary>
            Right shifts this by the specified value
            </summary>
            <param name="shiftValue">The shift value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_RightShift(SixPack.Security.Cryptography.BigInteger,System.Int32)">
            <summary>
            Implements the operator &gt;&gt;.
            </summary>
            <param name="operand">The operand.</param>
            <param name="shiftValue">The shift value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.OnesComplement">
            <summary>
            Returns NOT this (1's complement).
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_OnesComplement(SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Implements the operator ~.
            </summary>
            <param name="operand">The operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.Negate">
            <summary>
            Negates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_UnaryNegation(SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="operand">The operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_Equality(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="operand">The first operand.</param>
            <param name="secondOperand">The second operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_Inequality(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="operand">The first operand.</param>
            <param name="secondOperand">The second operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.Equals(System.Object)">
            <summary>
            Returns <c>true</c> if "this" is equal to object o, <c>false</c> otherwise.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.Equals(SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Returns <c>true</c> if "this" is equal to <see cref="T:SixPack.Security.Cryptography.BigInteger"/> o, <c>false</c> otherwise.
            </summary>
            <param name="obj">The <see cref="T:SixPack.Security.Cryptography.BigInteger"/> to compare to.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.Compare(SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Compares this to the specified operand.
            </summary>
            <param name="operand">The operand.</param>
            <returns>Returns <c>true</c> if this > operand, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_GreaterThan(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="operand">The first operand.</param>
            <param name="secondOperand">The second operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_LessThan(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="operand">The first operand.</param>
            <param name="secondOperand">The second operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_GreaterThanOrEqual(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="operand">The first operand.</param>
            <param name="secondOperand">The second operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_LessThanOrEqual(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="operand">The first operand.</param>
            <param name="secondOperand">The second operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.Divide(SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Divides this by the specified operand.
            </summary>
            <param name="operand">The operand.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_Division(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="operand">The first operand.</param>
            <param name="secondOperand">The second operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.Modulus(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Returns the modulus of the operands.
            </summary>
            <param name="operand">The first operand.</param>
            <param name="secondOperand">The second operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.Mod(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Returns the modulus of the operands.
            </summary>
            <param name="operand">The first operand.</param>
            <param name="secondOperand">The second operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_Modulus(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Implements the operator %.
            </summary>
            <param name="operand">The first operand.</param>
            <param name="secondOperand">The second operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.BitwiseAnd(SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Returns the bitwise and of this and the operator.
            </summary>
            <param name="operand">The operand.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_BitwiseAnd(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Implements the operator &amp;.
            </summary>
            <param name="operand">The first operand.</param>
            <param name="secondOperand">The second operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.BitwiseOr(SixPack.Security.Cryptography.BigInteger)">
            <summary>
            ORs this and the specified operand.
            </summary>
            <param name="operand">The operand.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_BitwiseOr(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Implements the operator |.
            </summary>
            <param name="operand">The first operand.</param>
            <param name="secondOperand">The second operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.Xor(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Implements the operator Xor.
            </summary>
            <param name="operand">The first operand.</param>
            <param name="secondOperand">The second operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.op_ExclusiveOr(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Implements the operator ^.
            </summary>
            <param name="operand">The first operand.</param>
            <param name="secondOperand">The second operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.Max(SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Returns max(this, bi)
            </summary>
            <param name="bi">The BigInteger to compare to.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.Min(SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Returns min(this, bi)
            </summary>
            <param name="bi">The BigInteger to compare to.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.Abs">
            <summary>
            Returns the absolute value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:Fullsix.Security.Cryptography.BigInteger"></see> in base 10.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:Fullsix.Security.Cryptography.BigInteger"></see>.
            </returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.ToString(System.Int32)">
            <summary>
            Returns a string representing the BigInteger in sign-and-magnitude
            format in the specified radix.
            </summary>
            <param name="radix">The radix.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.ToString(System.String)">
            <summary>
            Returns a string representing the BigInteger in sign-and-magnitude
            format in the specified character set.
            </summary>
            <param name="charSet">The character set that will be used to represent the value.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.ToHexString">
            <summary>
            Returns a hex string showing the contains of the BigInteger.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.ModPow(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Modulo Exponentiation
            </summary>
            <param name="exponent">The exponent.</param>
            <param name="modulus">The modulus.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.Gcd(SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Returns the greatest common denominator of (this, bi)
            </summary>
            <param name="bi">bi.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.GenerateRandomBits(System.Int32,System.Random)">
            <summary>
            Populates "this" with the specified amount of random bits
            </summary>
            <param name="bits">The number of bits.</param>
            <param name="rand">The random generator.</param>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.BitCount">
            <summary>
            Returns the position of the most significant bit in the BigInteger.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.FermatLittleTest(System.Int32)">
             <summary>
             Probabilistic prime test based on Fermat's little theorem
            
             for any a &lt; p (p does not divide a) if
                  a^(p-1) mod p != 1 then p is not prime.
            
             Otherwise, p is probably prime (pseudoprime to the chosen base).
             </summary>
             <param name="confidence">The confidence.</param>
             <returns>
             True if "this" is a pseudoprime to randomly chosen
             bases.  The number of chosen bases is given by the "confidence"
             parameter.
            
             False if "this" is definitely NOT prime.
             </returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.RabinMillerTest(System.Int32)">
             <summary>
             Probabilistic prime test based on Rabin-Miller's
            
             for any p &gt; 0 with p - 1 = 2^s * t
            
             p is probably prime (strong pseudoprime) if for any a &lt; p,
             1) a^t mod p = 1 or
             2) a^((2^j)*t) mod p = p-1 for some 0 &lt;= j &lt;= s-1
            
             Otherwise, p is composite.
             </summary>
             <param name="confidence">The confidence.</param>
             <returns>
             True if "this" is a strong pseudoprime to randomly chosen
             bases.  The number of chosen bases is given by the "confidence"
             parameter.
            
             False if "this" is definitely NOT prime.
             </returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.SolovayStrassenTest(System.Int32)">
             <summary>
             Probabilistic prime test based on Solovay-Strassen (Euler Criterion)
            
             p is probably prime if for any a &lt; p (a is not multiple of p),
             a^((p-1)/2) mod p = J(a, p)
            
             where J is the Jacobi symbol.
            
             Otherwise, p is composite.
             </summary>
             <param name="confidence">The confidence.</param>
             <returns>
             True if "this" is a Euler pseudoprime to randomly chosen
             bases.  The number of chosen bases is given by the "confidence"
             parameter.
            
             False if "this" is definitely NOT prime.
             </returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.LucasStrongTest">
            <summary>
            Implementation of the Lucas Strong Pseudo Prime test.
            </summary>
            <returns>
            Returns True if number is a strong Lucus pseudo prime.
            Otherwise, returns False indicating that number is composite.
            </returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.IsProbablePrime(System.Int32)">
            <summary>
            Determines within the specified confidence if "this" is a probable prime.
            </summary>
            <param name="confidence">The confidence.</param>
            <returns>
            	<c>true</c> if the specified confidence is a probable prime; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.IsProbablePrime">
            <summary>
            Determines  if "this" is a probable prime.
            </summary>
            <returns>
            	<c>true</c> if the specified confidence is a probable prime; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.IntValue">
            <summary>
            Returns the lowest 4 bytes of the BigInteger as an int.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.Int32Value">
            <summary>
            Returns the lowest 4 bytes of the BigInteger as an <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.LongValue">
            <summary>
            Returns the lowest 8 bytes of the BigInteger as a long.
            </summary>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.Int64Value">
            <summary>
            Returns the lowest 8 bytes of the BigInteger as a long.
            </summary>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.Jacobi(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Computes the Jacobi Symbol for a and b.
            </summary>
            <param name="a">a.</param>
            <param name="b">b.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.GeneratePseudoPrime(System.Int32,System.Int32,System.Random)">
            <summary>
            Generates a positive BigInteger that is probably prime.
            </summary>
            <param name="bits">The bits.</param>
            <param name="confidence">The confidence.</param>
            <param name="rand">The random number generator.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.GenerateCoprime(System.Int32,System.Random)">
            <summary>
            Generates a random number with the specified number of bits such
            that gcd(number, this) = 1
            </summary>
            <param name="bits">The bits.</param>
            <param name="rand">The rand.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.ModInverse(SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Returns the modulo inverse of this.  Throws ArithmeticException if
            the inverse does not exist.  (i.e. gcd(this, modulus) != 1)
            </summary>
            <param name="modulus">The modulus.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.ToByteArray">
            <summary>
            Returns the value of the BigInteger as a byte array.  The lowest
            index contains the MSB.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.SetBit(System.UInt32)">
            <summary>
            Sets the value of the specified bit to 1
            The Least Significant Bit position is 0.
            </summary>
            <param name="bitNumber">The bit num.</param>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.UnsetBit(System.UInt32)">
            <summary>
            Sets the value of the specified bit to 0
            The Least Significant Bit position is 0.
            </summary>
            <param name="bitNumber">The bit num.</param>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.Sqrt">
            <summary>
            Returns a value that is equivalent to the integer square root
            of the BigInteger.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.BigInteger.LucasSequence(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Returns the k_th number in the Lucas Sequence reduced modulo n.
            </summary>
            <param name="P">P.</param>
            <param name="Q">Q.</param>
            <param name="k">k.</param>
            <param name="n">n.</param>
            <returns></returns>
        </member>
        <member name="P:SixPack.Security.Cryptography.BigInteger.DataLength">
            <summary>
            Number of actual chars used
            </summary>
        </member>
        <member name="T:SixPack.Security.Cryptography.DataGenerator">
            <summary>
            A utility class to generate data.
            The data generated is not cryptographically secure.
            </summary>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomInt32(System.Random)">
            <summary>
            Returns a random Int32.
            </summary>
            <param name="random">A random number generator.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomInt32">
            <summary>
            Returns a random Int32.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomInt64(System.Random)">
            <summary>
            Returns a random Int64.
            </summary>
            <param name="random">A random number generator.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomInt64">
            <summary>
            Returns a random Int64.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomSimpleString(System.Random,System.Int32)">
            <summary>
            Returns a random simple String.
            </summary>
            <param name="random">A random number generator.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomSimpleString(System.Int32)">
            <summary>
            Returns a random simple String.
            </summary>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomAsciiString(System.Random,System.Int32)">
            <summary>
            Returns a random ASCII String.
            </summary>
            <param name="random">A random number generator.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomAsciiString(System.Int32)">
            <summary>
            Returns a random ASCII String.
            </summary>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomUnicodeString(System.Random,System.Int32)">
            <summary>
            Returns a random Unicode String.
            </summary>
            <param name="random">A random number generator.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomUnicodeString(System.Int32)">
            <summary>
            Returns a random Unicode String.
            </summary>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomGuid">
            <summary>
            Returns a random Guid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomBool">
            <summary>
            Returns a random bool.
            </summary>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomBoolean(System.Random)">
            <summary>
            Returns a random <see cref="T:System.Boolean"/>.
            </summary>
            <param name="random">A random number generator.</param>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomBoolean">
            <summary>
            Returns a random <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomDecimal(System.Random)">
            <summary>
            Returns a random Decimal.
            </summary>
            <param name="random">A random number generator.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomDecimal">
            <summary>
            Returns a random Decimal.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomDateTime(System.Random)">
            <summary>
            Returns a random DateTime.
            </summary>
            <param name="random">A random number generator.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomDateTime">
            <summary>
            Returns a random DateTime.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomXmlString(System.Random,System.Int32)">
            <summary>
            Returns a random XML String.
            </summary>
            <param name="random">A random number generator.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomXmlString(System.Int32)">
            <summary>
            Returns a random XML String.
            </summary>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomSyllables(System.Random,System.Int32)">
            <summary>
            Returns a pronounceable string made up of syllables
            </summary>
            <param name="random">A random number generator.</param>
            <param name="syllables">The number of syllables to generate</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomSyllables(System.Int32)">
            <summary>
            Returns a pronounceable string made up of syllables
            </summary>
            <param name="syllables">The number of syllables to generate</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomWords(System.Random,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a pronounceable string made up of words.
            </summary>
            <param name="random">A random number generator.</param>
            <param name="words">The number of words to generate.</param>
            <param name="minSyllablesPerWord">The inclusive minimum number of syllables per word.</param>
            <param name="maxSyllablesPerWord">The exclusive maximum number of syllables per word.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.DataGenerator.RandomWords(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a pronounceable string made up of words.
            </summary>
            <param name="words">The number of words to generate.</param>
            <param name="minSyllablesPerWord">The inclusive minimum number of syllables per word.</param>
            <param name="maxSyllablesPerWord">The exclusive maximum number of syllables per word.</param>
            <returns></returns>
        </member>
        <member name="T:SixPack.Security.Cryptography.RsaSmall">
            <summary>
            Rsa Cryptography for "small" numbers (RSA-small)
            </summary>
        </member>
        <member name="M:SixPack.Security.Cryptography.RsaSmall.#ctor(SixPack.Security.Cryptography.RsaSmallFullKey)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Security.Cryptography.RsaSmall"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:SixPack.Security.Cryptography.RsaSmall.Encrypt(SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Encrypts the specified Biginteger.
            </summary>
            <param name="decryptedValue">The Biginteger to encrypt.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.RsaSmall.Decrypt(SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Decrypts the specified Biginteger.
            </summary>
            <param name="encryptedValue">The BigInteger to decrypt.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Security.Cryptography.RsaSmall.GenerateKeys(System.Int32)">
            <summary>
            Generates the RSA-small key.
            </summary>
            <param name="bits">The bits.</param>
        </member>
        <member name="P:SixPack.Security.Cryptography.RsaSmall.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="T:SixPack.Security.Cryptography.RsaSmallFullKey">
            <summary>
            Encapsulates a RSA-small full (private and public) key.
            </summary>
        </member>
        <member name="M:SixPack.Security.Cryptography.RsaSmallFullKey.#ctor(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Security.Cryptography.RsaSmallFullKey"/> class.
            </summary>
            <param name="modulus">The modulus.</param>
            <param name="privateExponent">The private exponent.</param>
            <param name="publicExponent">The public exponent.</param>
        </member>
        <member name="P:SixPack.Security.Cryptography.RsaSmallFullKey.PrivateKey">
            <summary>
            Gets the private key.
            </summary>
            <value>The private key.</value>
        </member>
        <member name="P:SixPack.Security.Cryptography.RsaSmallFullKey.PublicKey">
            <summary>
            Gets the public key.
            </summary>
            <value>The public key.</value>
        </member>
        <member name="T:SixPack.Security.Cryptography.RsaSmallKey">
            <summary>
            Abstract class that encapsulates a RSA-small key.
            </summary>
        </member>
        <member name="M:SixPack.Security.Cryptography.RsaSmallKey.#ctor(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Security.Cryptography.RsaSmallKey"/> class.
            </summary>
            <param name="modulus">The modulus.</param>
            <param name="exponent">The exponent.</param>
        </member>
        <member name="M:SixPack.Security.Cryptography.RsaSmallKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Security.Cryptography.RsaSmallKey"/> class.
            </summary>
        </member>
        <member name="P:SixPack.Security.Cryptography.RsaSmallKey.Exponent">
            <summary>
            Gets the exponent.
            </summary>
            <value>The exponent.</value>
        </member>
        <member name="P:SixPack.Security.Cryptography.RsaSmallKey.Modulus">
            <summary>
            Gets the modulus.
            </summary>
            <value>The modulus.</value>
        </member>
        <member name="T:SixPack.Security.Cryptography.RsaSmallPrivateKey">
            <summary>
            Encapsulates a RSA-small private key.
            </summary>
        </member>
        <member name="M:SixPack.Security.Cryptography.RsaSmallPrivateKey.#ctor(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Security.Cryptography.RsaSmallPrivateKey"/> class.
            </summary>
            <param name="modulus">The modulus.</param>
            <param name="exponent">The exponent.</param>
        </member>
        <member name="T:SixPack.Security.Cryptography.RsaSmallPublicKey">
            <summary>
            Encapsulates a RSA-small public key.
            </summary>
        </member>
        <member name="M:SixPack.Security.Cryptography.RsaSmallPublicKey.#ctor(SixPack.Security.Cryptography.BigInteger,SixPack.Security.Cryptography.BigInteger)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Security.Cryptography.RsaSmallPublicKey"/> class.
            </summary>
            <param name="modulus">The modulus.</param>
            <param name="exponent">The exponent.</param>
        </member>
        <member name="T:SixPack.Standards.Base32">
            <summary>
            This class provides functions for Base32 encoding and decoding.
            </summary>
        </member>
        <member name="F:SixPack.Standards.Base32.charDigitsBase">
            <summary>
            First valid character that can be indexed in decode lookup table
            </summary>
        </member>
        <member name="F:SixPack.Standards.Base32.canonicalChars">
            <summary>
            Lookup table used to canonically encode() groups of data bits
            </summary>
        </member>
        <member name="F:SixPack.Standards.Base32.charDigits">
            <summary>
            Lookup table used to decode() characters in encoded strings
            </summary>
        </member>
        <member name="M:SixPack.Standards.Base32.Encode(System.Byte[])">
            <summary>
            Encode an array of binary bytes into a Base32 string.
            Should not fail (the only possible exception is that the
            returned string cannot be allocated in memory).
            </summary>
            <param name="value">Array of bytes to encode.</param>
            <returns>Base32 string corresponding to the byte array passed.</returns>
        </member>
        <member name="M:SixPack.Standards.Base32.Decode(System.String)">
            <summary>
            Decode a Base32 encoded string into an array of binary bytes.
            May fail if the parameter is a non canonical Base32 string
            (the only other possible exception is that the
            returned array cannot be allocated in memory)
            </summary>
            <param name="encoded">The encoded value.</param>
            <returns></returns>
        </member>
        <member name="T:SixPack.Standards.Mod9710">
            <summary>
            This class implements the MOD9010 checksum "check digits" algorythm.
            </summary>
        </member>
        <member name="M:SixPack.Standards.Mod9710.Checksum(System.String)">
            <summary>
            Calculates the Check Digits of a digit string.
            </summary>
            <param name="digits">The string to be checksummed.</param>
            <returns>A string containing the check digits.</returns>
        </member>
        <member name="T:SixPack.Text.TextUtilities">
            <summary>
            This class contains text related utility methods
            </summary>
        </member>
        <member name="M:SixPack.Text.TextUtilities.Clip(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Clips the text to the specified length, adding a terminator (e.g. "...").
            </summary>
            <param name="text">The text.</param>
            <param name="maxLength">Text length to clip to.</param>
            <param name="terminator">The terminator.</param>
            <param name="respectWordBoundaries">if set to <c>true</c> it will respect word boundaries.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Text.TextUtilities.Clip(System.String,System.Int32,System.Boolean)">
            <summary>
            Clips the text to the specified length.
            </summary>
            <param name="text">The text.</param>
            <param name="maxLength">Text length to clip to.</param>
            <param name="respectWordBoundaries">if set to <c>true</c> it will respect word boundaries.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Text.TextUtilities.Clip(System.String,System.Int32)">
            <summary>
            Clips the text to the specified length, respecting word boundaries.
            </summary>
            <param name="text">The text.</param>
            <param name="maxLength">Text length to clip to.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Text.TextUtilities.Clip(System.String,System.Int32,System.String)">
            <summary>
            Clips the text to the specified length, adding a terminator (e.g. "..."), respecting word boundaries.
            </summary>
            <param name="text">The text.</param>
            <param name="maxLength">Text length to clip to.</param>
            <param name="terminator">The terminator.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Text.TextUtilities.RemoveHtml(System.String)">
            <summary>
            Removes the HTML from a text string.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Text.TextUtilities.ConvertCamelCaseToSpaceSeparated(System.String)">
            <summary>
            Converts camel case text to a space separated string.
            </summary>
            <param name="camelCaseText">The camel case text.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Text.TextUtilities.ToBase64(System.String)">
            <summary>
            Converts the specified string to base-64 using UTF-8 encoding.
            </summary>
            <param name="plaintext">The text to be converted.</param>
            <returns>Returns a string with the base-64 representation of the plain text.</returns>
        </member>
        <member name="M:SixPack.Text.TextUtilities.FromBase64(System.String)">
            <summary>
            Converts the specified base-64 string to plain text using UTF-8 encoding.
            </summary>
            <param name="base64Text">The base-64 encoded text.</param>
            <returns>Returns a string with the decoded text.</returns>
        </member>
        <member name="M:SixPack.Text.TextUtilities.ToHex(System.Byte[])">
            <summary>
            Converts the specified array to an hexadecimal string.
            </summary>
            <param name="data">The array to convert.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Text.TextUtilities.FromHex(System.String)">
            <summary>
            Converts the specified hexadimal string to an array.
            </summary>
            <param name="hexadecimal">The hexadecimal string to be converted.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Text.TextUtilities.Sanitize(System.String,SixPack.Text.TextSanitationMode)">
            <summary>
            Sanitizes the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="sanitationMode">The sanitation mode.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Text.TextUtilities.NormalizeForCode(System.String,SixPack.Text.TextNormalizationType)">
            <summary>
            Normalizes a string for use in code.
            </summary>
            <param name="text">The text to be normalized.</param>
            <param name="normalizationType">Type of the normalization.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.Text.TextUtilities.Hash(System.String[])">
            <summary>
            Hashes the specified values and returns a string representation of the result.
            </summary>
            <param name="values">The values to be hashed.</param>
            <returns></returns>
            <remarks>
            The resulting string is guaranteed to be a valid file name.
            It will only contain the following characters: ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-
            </remarks>
        </member>
        <member name="T:SixPack.CodedException">
            <summary>
            The abstract parent exception for all exceptions which have a code and a message.
            </summary>
        </member>
        <member name="M:SixPack.CodedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.CodedException"/> class.
            </summary>
        </member>
        <member name="M:SixPack.CodedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.CodedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:SixPack.CodedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.CodedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:SixPack.CodedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.CodedException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:SixPack.CodedException.GetErrorCodeFromResource(System.String)">
            <summary>
            Gets the error code from a resource string.
            </summary>
            <param name="resource">The resource string.</param>
            <returns></returns>
        </member>
        <member name="M:SixPack.CodedException.GetErrorMessageFromResource(System.String)">
            <summary>
            Gets the error message from a resource string.
            </summary>
            <param name="resource">The resource string.</param>
            <returns></returns>
        </member>
        <member name="P:SixPack.CodedException.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
            <value>The error code.</value>
        </member>
        <member name="P:SixPack.CodedException.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="T:SixPack.Text.UnicodeRange">
            <summary>
            Represents the valid ranges of Unicode
            </summary>
        </member>
        <member name="T:SixPack.Text.UnicodeSemantics">
            <summary>
            Validates a <see cref="T:System.UInt32"/> against a set of Unicode ranges. 
            </summary>
        </member>
        <member name="M:SixPack.Text.UnicodeSemantics.#ctor(SixPack.Text.UnicodeRange[])">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Text.UnicodeSemantics"/> class.
            </summary>
            <param name="validRanges">
            A <see cref="T:SixPack.Text.UnicodeRange"/> parameter that defines the range of characters we want to validate.
            </param>		
        </member>
        <member name="M:SixPack.Text.UnicodeSemantics.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SixPack.Text.UnicodeSemantics"/> class.
            </summary>
        </member>
        <member name="M:SixPack.Text.UnicodeSemantics.IsInRange(System.UInt32)">
            <summary>
            Returns true if the specified uint maps to a valid Unicode character in the ranges specified.
            </summary>
            <param name="value">The value.</param>
            <returns>
            True if the code is in one of the ranges defined in the creator, False otherwise.
            </returns>
        </member>
        <member name="M:SixPack.Text.UnicodeSemantics.IsInRange(System.UInt32,SixPack.Text.UnicodeRange[])">
            <summary>
            Returns true if the specified uint maps to a valid Unicode character in the ranges specified.
            </summary>
            <param name="value">The value.</param>
            <param name="validRanges">A series of <see cref="T:SixPack.Text.UnicodeRange"/> to match the value against.</param>
            <returns>
            True if the code is in one of the ranges, False otherwise.
            </returns>
        </member>
        <member name="P:SixPack.Text.UnicodeSemantics.MinValue">
            <summary>
            Represents the smallest possible value of a valid argument for <see cref="M:SixPack.Text.UnicodeSemantics.IsInRange(System.UInt32)"/>
            </summary>
        </member>
        <member name="P:SixPack.Text.UnicodeSemantics.MaxValue">
            <summary>
            Represents the largest possible value of a valid argument for <see cref="M:SixPack.Text.UnicodeSemantics.IsInRange(System.UInt32)"/>
            </summary>
        </member>
        <member name="T:SixPack.Drawing.TangoPalette">
            <summary>
            The Tango palette
            See http://en.wikipedia.org/wiki/Tango_Desktop_Project#Color_palette
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.Aluminium1">
            <summary>
            Aluminium, lightest
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.Aluminium2">
            <summary>
            Aluminium, light
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.Aluminium3">
            <summary>
            Aluminium, medium light
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.Aluminium4">
            <summary>
            Aluminium, medium dark
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.Aluminium5">
            <summary>
            Aluminium, dark
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.Aluminium6">
            <summary>
            Aluminium, darkest
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.Butter1">
            <summary>
            Butter, light
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.Butter2">
            <summary>
            Butter, medium
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.Butter3">
            <summary>
            Butter, dark
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.Chameleon1">
            <summary>
            Chameleon, light
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.Chameleon2">
            <summary>
            Chameleon, medium
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.Chameleon3">
            <summary>
            Chameleon, dark
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.Chocolate1">
            <summary>
            Chocolate, light
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.Chocolate2">
            <summary>
            Chocolate, medium
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.Chocolate3">
            <summary>
            Chocolate, dark
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.Orange1">
            <summary>
            Orange, light
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.Orange2">
            <summary>
            Orange, medium
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.Orange3">
            <summary>
            Orange, dark
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.Plum1">
            <summary>
            Plum, light
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.Plum2">
            <summary>
            Plum, medium
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.Plum3">
            <summary>
            Plum, dark 
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.ScarletRed1">
            <summary>
            Scarlet Red, light
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.ScarletRed2">
            <summary>
            Scarlet Red, medium
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.ScarletRed3">
            <summary>
            Scarlet Red, dark
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.SkyBlue1">
            <summary>
            Sky Blue, light
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.SkyBlue2">
            <summary>
            Sky Blue, medium
            </summary>
        </member>
        <member name="F:SixPack.Drawing.TangoPalette.SkyBlue3">
            <summary>
            Sky Blue, dark
            </summary>
        </member>
    </members>
</doc>
